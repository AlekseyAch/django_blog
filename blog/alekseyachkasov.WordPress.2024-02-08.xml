<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/6.4.3" created="2024-02-08 08:58" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Aleksey Achkasov</title>
	<link>https://achkasovwebmagic.ru</link>
	<description>WordPress Developer</description>
	<pubDate>Thu, 08 Feb 2024 08:58:09 +0000</pubDate>
	<language>ru-RU</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://achkasovwebmagic.ru</wp:base_site_url>
	<wp:base_blog_url>https://achkasovwebmagic.ru</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[AlexWeb]]></wp:author_login><wp:author_email><![CDATA[aachkasov2013@gmail.ocm]]></wp:author_email><wp:author_display_name><![CDATA[AlexWeb]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>http://achkasovwebmagic.ru/wp-content/uploads/2024/01/cropped-favikon-32x32.jpg</url>
	<title>Aleksey Achkasov</title>
	<link>https://achkasovwebmagic.ru</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title><![CDATA[Первый урок 19,12,2023]]></title>
		<link>https://achkasovwebmagic.ru/pervyj-urok-16-10-2023/</link>
		<pubDate>Tue, 19 Dec 2023 16:39:44 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1366</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Самое важное на чем строиться язык Python это объекты.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Python - ооп (объектно ориентированный язык программирования)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Главная идея в том, что все сущности это объекты.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Объект - это экземпляр определенного класса.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Класс это шаблон(прототип) для создания объекта.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>У каждого объекта есть атрибуты.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>А вот если у атрибута есть функция, значит такой атрибут называют методом.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Основные типы в Pyhton</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>**Основные типы**
Строки str ‘Aleksey’
Целое число int 10 или -100
Логический тип bool true/false

Список list &#91;1, 2, 3]
В списке добавлюятся любые значения.

Словарь {'min': 5, 'max': 8} - Ключ значение min, max
В словорях и в списках может быть любое колличество значений
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Встроенные функции</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print                 (”Hallo Pyhton”)
Встроенная функция    Значение типа str ('Если одно слово') ("Если два и больше")
-------------------------------------------------------------------------------------
		Имя  Параметры
det my_fn(a, b);
		a = a + 1  Тело 
		c = a + и  Функции
Результат return c
-------------------------------------------------------------------------------------

Некоторые встроенные функции
print()  type()  id() len()  sum()  input()  round()  min()  max()  int()  str()  bool()
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Встроенная функция dir</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>С помощью этой функции можно получить название всех атрибутов того или иного объекта</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>name = ‘Aleksey’
print(dir(name))

**Ответ в консоли:**
&#91;'__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

**Применяем метод для функции:**
name = ('Aleksey')
print(name.upper())

**Получаем ответ в консоли:**
ALEKSEY
****т.к. **upper** это атрибут который делает текст заглавными буквами.
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Отступы в коде Pyhton</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Отступы играют очень важную роль</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Один отступ это 4 пробела</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>**Пример корректного кода:**
def print_name_function(name):
    print(name)
Отступ формируется из 4-х простых пробелов.

**Некорректный код:**
def print_name_function(name):
print(name)
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Форматирование кода Pyhton</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Документ PEP8</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Стиливой гайд по pyhton <a href="https://peps.python.org/pep-0008/">https://peps.python.org/pep-0008/</a></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>Для отступов использовать <strong>пробелы</strong> не Tab</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Длина строк должна быть не более <strong>79 символов</strong></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Функции и классы</strong> должны быть отделены от других <strong>строк кода двумя пустыми строками</strong></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Импорты</strong> модулей должны быть на <strong>отдельных строках</strong></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Комментарии</strong> в конце строки кода должны отделяться по крайней <strong>мере двумя пробелами</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1366</wp:post_id>
		<wp:post_date><![CDATA[2023-12-19 19:39:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-19 16:39:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-19 21:19:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-19 18:19:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pervyj-urok-16-10-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_translations" nicename="pll_65b3a7bd55266"><![CDATA[pll_65b3a7bd55266]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[wbcr_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%d0%bf%d0%b5%d1%80%d0%b2%d1%8b%d0%b9-%d1%83%d1%80%d0%be%d0%ba-16102023]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[pervyj-urok-16102023]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Второй день обучения 20,12,2023]]></title>
		<link>https://achkasovwebmagic.ru/vtoroj-den-obucheniya-20-12-2023/</link>
		<pubDate>Wed, 20 Dec 2023 20:33:02 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1369</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Комментирование кода</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#Комментарий

print(10)  #Код с комментарием
После строки кода, используется 2 и более пробелов перед комментарием
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Функции, обзор функций</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Одну и туже функцию можно вызывать многократно.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Параметр пишется в круглых скобка. Параметр это переменная которая доступна внутри функции. И значение этой переменной задается в момент вызова этой функции.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Параметры доступны только в теле функции. За ее пределами они не доступны</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def hallo():
	  print("Hallo there!")

hallo()
hallo()

**Функция с параметрами:**
def hallo(name):
	print("Hallo there!", name)

hallo('Алексей')
**Ответ в консоли:** Hallo there! Алексей
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Ключевое слово <code><kbd>return</kbd></code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>return</code> возвращает значение. Это означает что функция выполнила работу и вернула определенное значение как результат своей работы. И потом этот результат можно использовать там, где нужно.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>return</code> по другому называется инструкция.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Как только функция доходит до <code>return</code> она прекращает работу. И если после <code>return</code> будет написано что то еще, работать дальше ничего не будет.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def sum_nums(a, b):
	sum = a + b
	return sum

first_sum = sum_nums(10,5)
print(first_sum)

**А еще можно передать одну функцию сразу в другую:**
print(sum_nums(10,5))

**Или еще вариант:**
print(sum_nums(sum_nums(10, 23),30))
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Выражения <code>expressions</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Результатом выражения является значение.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Результат выражения можно в функции</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Вызов функции это выражение</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Результатом каждого выражения является значение
5 + 3 #8 - Сумма значений
a &gt; b # True and False
'Hallo' + 'World' # 'Hallo World'
my_func(10, 5) # результат функции
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Инструкции</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Инструкция создать функцию. Инструкция выполняет действие. Создает функцию, выполняет действие, импортирует модуль, объявление функции</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_name = 'Bogdan' # Присвоение выражения

# Условная инструкция
if my_name:
   print(my_name)

# Импортирование модуля
import datetime
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Переменные</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Переменные дают возможность повторного доступа к значениям которые этим переменным присвоены.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Переменные это коробка, в которую мы кладем значения.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Имена в pyhton</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>snake_case</strong> - Переменные, функции, методы, модули. Самый популярный и чаще всего используется.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PascalCase</strong> - Классы</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>my-package</strong> - Пакеты</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>DB_PASSWORD</strong> - Константы/Переменные (переменные, которые не изменяются в процессе жизни функции, или программы)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Название переменных должно быть понятным.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Переменные: объявление и присвоение значений</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pyhton является языком с динамической типизацией. Это значит, что одной и той же переменной можно присваивать разные значения.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Тип любой переменной определяется типом присвоенного значения, строка, число, логика и т.д.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_number = 10

**Динамическая типизация**
my_variation = 10
my_variation = 'Aleksey'
my_variation = True

**Вывод значений переменных в терминал:**
my_number = 10
print(my_number) # 10
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Правила работы с переменными:</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>Всегда выбирать осмысленные названия</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>В названиях переменных использовать имя существительное, например: <strong>name, comments, new_photos — Отвечает на вопрос, что содержит?</strong></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Название функции и методов начинать с глагола, например: <strong>get_data, create_request — Что выполняет или возвращает?</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Типы и структуры данных</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>В pyhton отсутствуют примитивные типы.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В pyhton существуют изменяем и неизменяемые объекты.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>int</strong> — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>str</strong> — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>bool</strong> — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>float</strong> (число с десятичной точкой) — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>tuple</strong> (кортеж) — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>none</strong> — не изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>list</strong> — изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>dict</strong> (словарь) — изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>set</strong> (набор) — изменяемый объект <em>Могут быть только уникальные элементы</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>user-defined classes</strong> (пользовательские классы) — изменяемый объект</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Переменные и объекты</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Как можно проверить что переменная является объектом.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>my_name — объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пока существует переменная my_name сохраняется объект в памяти.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Переменная, это всего лишь ссылка на объект в памяти.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Как можно узнать какую ссылку содержит та или иная переменная.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>id(my_country)
Встроенная функция id
my_country это переменная.

**Пример:** 
my_number = 10
print(id(my_number))

**Ответ в консоли:** 140706231405272 (Адрес объекта в памяти)

***В python возможно что переменные могут ссылкать на один объект.***
my_number = 10
print(id(my_number))
Ответ в консоли:
140707503786712

other_number = my_number
print(id(other_number))
Ответ в консоли:
140707503786712
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1369</wp:post_id>
		<wp:post_date><![CDATA[2023-12-20 23:33:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-20 20:33:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-20 23:34:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-20 20:34:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vtoroj-den-obucheniya-20-12-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Третий день обучения 21,12,2023]]></title>
		<link>https://achkasovwebmagic.ru/tretij-den-obucheniya-21-12-2023/</link>
		<pubDate>Thu, 21 Dec 2023 13:43:50 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1376</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Строки str</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Строка это последовательность символов</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_name = "Aleksey"
print(my_name)
#Aleksey

print(type(my_name))
#&lt;class 'str'&gt;

**Многострочные строки**
info_msg = """Привет
Мир"""

print(info_msg)
#Привет 
#Мир

long_str = "Очень длинная строка кода"
print(long_str)
print(type(long_str))

**Ответ в консоли**
Очень длинная строка кода
&lt;class 'str'&gt;

long_str = """Очень
длинная
строка
кода"""
print(long_str)
print(type(long_str))

**Ответ в консоли**
Очень
длинная
строка
кода
&lt;class 'str'&gt;
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Встроенные функции и строки</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print(len(long_str))
len - колличество символов в строке

Если использовать квадратные скобки в выводе принт можно получить символ из строки
print(long_str&#91;0])
print(long_str&#91;3:6])

**Доступные методы для строк:**
upper() replace() count() index() capitalize() lover()

**Вызов методов:**  
print(long_str.replace)

Метод replace заменяет одни данные на другие.
Методы не могут создавать новые объекты
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Целые числа int</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>frends_qty = 50

print(frends_qty)
#50

print(type(frends_qty))
&lt;class 'int'&gt;
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Все данные которые вводит пользователь в поле input всегда str но его можно пере конвертировать в int через специальную функцию</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>user_input = input("Введите свое значение сюда:")
any_num = int(user_input)

print(any_num)
#Номер который ввел человек в поле input

print(type(any_num))
#Будет ответ &lt;class 'int'&gt;

**Как конвертировать сразу результат ввода пользователем данных в int**
any_num = int(input("Ввыедите сюда что угодно: "))
print(any_num)
print(type(any_num))
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Возведение в степень power</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>base = 5
power = 3

print(pow(base, power))
#125

Если число длинное, допускается разделение через подчеркивание 1_000_000
Это разделение создано для того что бы читать числа было удобно
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Числа с десятичной точкой float</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>average_price = 17.25

print(average_price)
#17.25
print(type(average_price))
#&lt;class 'float'&gt;

**Конвертация**
average_price = 17.25
price = int(average_price = 17.25)

print(prict)
#18

**Округление**
average_price = 17.25
print(round(average_price))
#17

rate = 0.78
print(round(rate))
#1

print(type(round(rate)))
#&lt;class 'int'&gt;
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Комплексные числа complex</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Комплексное число состоит из действительной и мнимой части</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>complex_a = 3 + 5j
complex_b = 4 + 7j
sum = complex_a + comlex_b

print(sum)
#(7+12j)

print(type(sum))
#&lt;class 'complex'&gt;
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Логический тип bool</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Часто используется при проверке правдивости выражения</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>is_authorized = True

print(is_authorized)
#True

print(type(is_authorized))
#&lt;class 'bool'&gt;

**Конвертация в логическое значение**
bool(is_authorized)
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Конвертация типов</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>python не выполняет неявную конвертацию типов значений</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Встроенные функции для явной конвертации типов</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>str() строка</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int() целое число</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>float()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>list()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>tuple()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>set()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Операции с значениями разных типов</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>‘10’ + 5
TypeError: can only concatenate str (not "int") to str

будет ошибка. так как конвертация двух типов str и int

**Корректное сложение явной конвертации типов
5 + int('10')
#15**
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Магические методы</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int_num = 50
float_num = 7.5

print(int_num + float_num)
#57.5

print(int_num.__add__(float_num))
#NotImplemented

print(float_num.__radd__(int_num))
#57.5
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1376</wp:post_id>
		<wp:post_date><![CDATA[2023-12-21 16:43:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-21 13:43:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-21 16:43:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-21 13:43:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tretij-den-obucheniya-21-12-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Четвертый день обучения]]></title>
		<link>https://achkasovwebmagic.ru/chetvertyj-den-obucheniya/</link>
		<pubDate>Fri, 22 Dec 2023 19:03:42 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1378</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Примеры методов:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>__abs__</code>, <code>__add__</code>, <code>__and__</code>, <code>__bool__</code>, <code>__ceil__</code>, <code>__class__</code>, <code>__contains__</code>, <code>__delattr__</code>, <code>__delete__</code>, <code>__dir__</code>, <code>__divmod__</code>, <code>__enter__</code>, <code>__eq__</code>, <code>__exit__</code>, <code>__float__</code>, <code>__floordiv__</code>, <code>__format__</code>, <code>__ge__</code>, <code>__get__</code>, <code>__getattribute__</code>, <code>__getitem__</code>, <code>__getnewargs__</code>, <code>__gt__</code>, <code>__hash__</code>, <code>__iadd__</code>, <code>__iand__</code>, <code>__idivmod__</code>, <code>__ifloordiv__</code>, <code>__ilshift__</code>, <code>__imatmul__</code>, <code>__imod__</code>, <code>__imul__</code>, <code>__index__</code>, <code>__init__</code>, <code>__init_subclass__</code>, <code>__instancecheck__</code>, <code>__int__</code>, <code>__invert__</code>, <code>__ior__</code>, <code>__ipow__</code>, <code>__irshift__</code>, <code>__isub__</code>, <code>__iter__</code>, <code>__itruediv__</code>, <code>__ixor__</code>, <code>__le__</code>, <code>__len__</code>, <code>__length_hint__</code>, <code>__lshift__</code>, <code>__lt__</code>, <code>__matmul__</code>, <code>__missing__</code>, <code>__mod__</code>, <code>__mul__</code>, <code>__ne__</code>, <code>__neg__</code>, <code>__new__</code>, <code>__next__</code>, <code>__or__</code>, <code>__pos__</code>, <code>__pow__</code>, <code>__prepare__</code>, <code>__radd__</code>, <code>__rand__</code>, <code>__rdivmod__</code>, <code>__reduce__</code>, <code>__reduce_ex__</code>, <code>__repr__</code>, <code>__reversed__</code>, <code>__rfloordiv__</code>, <code>__rlshift__</code>, <code>__rmatmul__</code>, <code>__rmod__</code>, <code>__rmul__</code>, <code>__ror__</code>, <code>__round__</code>, <code>__rpow__</code>, <code>__rrshift__</code>, <code>__rshift__</code>, <code>__rsub__</code>, <code>__rtruediv__</code>, <code>__rxor__</code>, <code>__set__</code>, <code>__set_name__</code>, <code>__setattr__</code>, <code>__setitem__</code>, <code>__setstate__</code>, <code>__sizeof__</code>, <code>__str__</code>, <code>__sub__</code>, <code>__subclasscheck__</code>, <code>__truediv__</code>, <code>__trunc__</code>, <code>__xor__</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Обратите внимание, что это только простые примеры и магические методы могут быть использованы для реализации более сложного поведения классов и объектов в Python.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Так можно посмотреть какие методы доступны функции:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print(dir(bool))

**Ответ в консоли:**
&#91;'__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_count', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'is_integer', 'numerator', 'real', 'to_bytes']
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Магические методы в Python</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Магические методы, также известные как специальные методы или методы-дандеры, являются особыми методами в языке программирования Python. Они позволяют определить поведение классов и объектов в различных контекстах, таких как операторы, итерации, преобразование типов и многое другое.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Некоторые из наиболее часто используемых магических методов в Python включают:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>__init__</code>: метод-конструктор, вызываемый при создании нового экземпляра класса. Он позволяет инициализировать атрибуты объекта и выполнить другие необходимые действия перед его использованием.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__str__</code>: метод, возвращающий строковое представление объекта. Этот метод используется, когда объект нужно представить в виде строки, например, при выводе на экран или при преобразовании в строку.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__len__</code>: метод, возвращающий длину объекта. Он позволяет получить информацию о количестве элементов в объекте, что может быть полезно при работе с коллекциями данных, такими как списки или кортежи.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__getitem__</code> и <code>__setitem__</code>: методы, позволяющие получить и установить значение элемента объекта по индексу. Они позволяют обращаться к объекту, как к последовательности или контейнеру, и работать с его элементами.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__iter__</code> и <code>__next__</code>: методы, позволяющие итерировать по объекту. Они позволяют использовать объект в цикле <code>for</code>, перебирая его элементы один за другим.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Это лишь небольшой обзор магических методов в Python. Их полный список и детальное описание можно найти в официальной документации Python.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Вот несколько простых примеров кода, демонстрирующих использование магических методов в Python:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def __str__(self):
        return f"Rectangle({self.width}, {self.height})"

    def __len__(self):
        return self.width * self.height

    def __getitem__(self, index):
        if index == 0:
            return self.width
        elif index == 1:
            return self.height
        else:
            raise IndexError("Index out of range")

    def __setitem__(self, index, value):
        if index == 0:
            self.width = value
        elif index == 1:
            self.height = value
        else:
            raise IndexError("Index out of range")

rectangle = Rectangle(5, 3)
print(rectangle)  # Вывод: Rectangle(5, 3)

print(len(rectangle))  # Вывод: 15

print(rectangle&#91;0])  # Вывод: 5
print(rectangle&#91;1])  # Вывод: 3

rectangle&#91;0] = 7
rectangle&#91;1] = 4
print(rectangle)  # Вывод: Rectangle(7, 4)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере мы создаем класс <code>Rectangle</code>, который имеет атрибуты <code>width</code> (ширина) и <code>height</code> (высота). Мы определяем магические методы <code>__str__</code>, <code>__len__</code>, <code>__getitem__</code> и <code>__setitem__</code> для представления объекта в виде строки, получения его длины, доступа к его элементам по индексу и изменения значений элементов соответственно.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Обратите внимание, что это только простые примеры и магические методы могут быть использованы для реализации более сложного поведения классов и объектов в Python.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Списки list</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Последовательность элементов</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Упорядоченная последовательность элементов</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_fruits = &#91;'apple', 'banana', 'lime']

posts_ids = &#91;151, 552, 255]

user_inputs = &#91;True, 'hi!', 10.5]
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Порядок элементов в списке имеет значение</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Каждый элемент в списке имеет свой номер</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Проверка длины списка функция len</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Для удаления пункта из списка можно использовать оператор <strong>del</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>user_inputs = &#91;True, 'hi!', 10.5]
print(len(user_inputs))
#3

del user_inputs&#91;1]
print(user_inputs)
#True 'hi!'
print(len(user_inputs))
#2
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><strong>Списки словарей</strong></h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>users = &#91;
	{
		'user_id': 134,
		'user_nmae': 'Alice',
	}		
	{
		'user_id': 821,
		'user_name': 'Bob'
	}
]

print(len(users))
#2
print(users&#91;1]&#91;'user_id'])
#821
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Методы списков</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>append</code>, <code>clear</code>, <code>copy</code>, <code>count</code>, <code>extend</code>, <code>index</code>, <code>insert</code>, <code>pop</code>, <code>remove</code>, <code>reverse</code>, <code>sort</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Методы списков объекты наследуют от класса list</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.append</code>-добавляет элемент в список</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>pop</code>- удаление из списка (если без указания числа) будет удален последний элемент</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>sort</code>- сортировка, сортировка по умолчанию по возрастанию идет, если нужно отсортировать в обратном порядке (по убыванию) пишем именованый аргумент (revers=True)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Конвертация в список</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>greeting = "Hallo from Python"
greeting_letters = list(greeting)

print(greeting_letters)
#&#91;'H', 'a', 'l', 'l', 'o', ' ', 'f', 'r', 'o', 'm', ' ', 'P', 'y', 't', 'h', 'o', 'n']

**Конвертация словарей в списки**
my_dict = {'a': 10, 'b': True}
my_dict_keys = list(my_dict)

print(my_dict_keys)
#&#91;'a', 'b']
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Арифметические операции в списках</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>rating = &#91;2.5, 5.0, 4.3, 3.7]

print(min(rating))
print(max(rating))
print(sum(rating))

print(sum(rating)/len(rating))
#2.5
#5.0
#15.5
#3.875

**Объедиение списков**
my_ratings = &#91;2.5, 5.0]
other_ratings = &#91;3.7, 4.5, 4.9]

all_ratings = my_ratings + other_ratings
print(all_ratings)
#&#91;2.5, 5.0, 3.7, 4.5, 4.9]

*при использовании оператора + вызывается магический метод ____add__ 
в котором уже указано что можно делать с списками*

**Нарезка списков**
ratings = &#91;2.5, 5.0, 4.3, 3.7]

first_two_ratings = ratings&#91;:2]
print(first_two_ratings)
#&#91;2.5, 5.0]
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Копирование списков</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>**Копирование по ссылке:**
my_cars = &#91;'BMW', 'Mercedes']
copied_cars = my_cars
copied_cars.append('Audi')

print(copied_cars)
#&#91;'BMW', 'Mercedes', 'Audi']

**Создание нового списка такого же: через :**
my_cars = &#91;'BMW', 'Mercedes']
copied_cars = my_cars &#91;:]
copied_cars.append('Audi')

print(copied_cars)
#&#91;'BMW', 'Mercedes', 'Audi']

**Создание нового списка такого же: через функцию copy**
my_cars = &#91;'BMW', 'Mercedes']
copied_cars = my_cars.copy()
copied_cars.append('Audi')

print(copied_cars)
#&#91;'BMW', 'Mercedes', 'Audi']

**Создание нового списка такого же: через функцию list**
my_cars = &#91;'BMW', 'Mercedes']
copied_cars = list(my_cars)
copied_cars.append('Audi')

print(copied_cars)
#&#91;'BMW', 'Mercedes', 'Audi']
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1378</wp:post_id>
		<wp:post_date><![CDATA[2023-12-22 22:03:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-22 19:03:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-22 22:03:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-22 19:03:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chetvertyj-den-obucheniya]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Пятый день обучения 25,12,2023]]></title>
		<link>https://achkasovwebmagic.ru/pyatyj-den-obucheniya-25-12-2023/</link>
		<pubDate>Mon, 25 Dec 2023 21:56:02 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1380</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Словари dict</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Словарь это набор элементов, и каждый элемент это пара ключ: значение</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В одном словаре не может быть двух одинаковых ключей</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Порядок элементов в словаре не имеет значения</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Индексов у элементов в словаре нет.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_motobike = {
		'brand': 'Ducati',
		'price': 2500,
		'engine_vol': 1.2,
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Изменение и удаление значений в словарях</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_motobike = {
		'brand': 'Ducati',
		'price': 2500,
		'engine_vol': 1.2,
}

print(my_motobike&#91;'brand'])
#Ducati

my_motobike&#91;'price'] = 20000

print(my_motobike)

**Добавление нового ключа/либо перезапись**
my_motobike&#91;'is_new'] = True
#{'brand': 'Ducati', 'price': 20000, 'engine_vol': 1.2, 'is_new': True}

**Удаление элементов:**
del my_motobike&#91;'is_new']
#{'brand': 'Ducati', 'price': 20000, 'engine_vol': 1.2}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Использование переменных в словарях</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_motobike = {
		'brand': 'Ducati',
		'price': 2500,
		'engine_vol': 1.2,
}

key_name = 'brand'
my_motobike&#91;key_name] = 'BMW'

print(my_motobike)
#{'brand': 'BMW', 'price': 20000, 'engine_vol': 1.2}

**Вложенные словари**
my_motobike = {
		'brand': 'Ducati',
		'price_info': {
				'price': 2500,
				'engine_vol': 1.2,
		}
}

print(my_motobike&#91;'price_info']&#91;'price'])
#2500

**Использование переменных для создания словарей**
brand = 'Ducati'
bike_price = 25000
engine_volume = 1.2

my_motobike = {
		'brand': brand,
		'price': bike_price,
		'engine_volume': engine_volume,
}

print(my_motobike)
#{'brand': 'Ducati', 'price': 25000, 'engine_volume': 1.2}

**Обработка ошибки при отстутсвии ключа в словаре**
print(my_motobike.get('qty'))
#None

**Отдавать значение по умолчанию если нет ключа:**
print(my_motobike.get('qty', 0))
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Создание словаря из списка (конвертация)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_list = &#91;2.5, True, 'Hallo']
my_dict = dict(my_list)

print(my_dict)
#TypeError: cannot convert dictionary update sequence element #0 to a sequence

my_list = &#91;&#91;'type', 2.5], &#91;'True', 333], &#91;'text','Hallo']]
my_dict = dict(my_list)

print(my_dict)
#{'type': 2.5, 'True': 333, 'text': 'Hallo'}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Кортежи tuple</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Упорядоченная последовательность элементов</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Кортежи изменять нельзя</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В кортеже может быть как однотипный так и несколько типов значений</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Элементы помещаются между парами круглых способ ()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>У первого элемента индекс 0 как и у списков</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_nams = (10, 55, 2255, 22)
print(my_nams)
#(10, 55, 2255, 22)

***Удалять и заменять значения нельзя*

Картеж словарей**
users = (
	{
		'user_id': 134,
		'user_name': 'Aleksey'
	},
	{
		'user_id': 831,
		'user_name': 'Natalia'
	}
)

print(users&#91;1]&#91;'user_id'])
#831
users&#91;1]&#91;'user_id'] = 100

print(users&#91;1]&#91;'user_id'])
#100
print(users)
#({'user_id': 134, 'user_name': 'Aleksey'}, {'user_id': 100, 'user_name': 'Natalia'})
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Методы для кортежей</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>count и index</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>методов для добавления новых элементов нет</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>методы кортежей наследуются от класса tuple</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>posts_ids = (111, 25, 545, 444)
print(posts_ids.count(111))
#1

**Кортеж можно конвертировать в список**
posts_ids = (111, 25, 545, 444)

posts_ids_list = list(posts_ids)
posts_ids_list.append(351)

print(posts_ids_list)
#&#91;111, 25, 545, 444, 351]
posts_ids_list = tuple(posts_ids_list)
print(posts_ids_list)
#(111, 25, 545, 444, 351)
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Наборы set</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Это не упорядоченная последовательность элементов.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Набор содержит только уникальные элементы</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В наборах сохраняют однотипные данные</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Индексов у элементов нет.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_fruts = {'apple', 'banana', 'lime'}

posts_ids = {125, 2212, 545}

user_inputs = {True, 'hi!', 10.5}

print(my_fruts)
#{'lime', 'banana', 'apple'}
print(type(my_fruts))
#&lt;class 'set'&gt;

**Дубликаты удаляются**
user_inputs = {True, 'hi!', 10.5, 10.5, 10.5}

print(user_inputs)
#{'hi!', 10.5, True}

***Если сравнивать, наборы данных будут одинаковые***
my_fruts = {'apple', 'banana', 'lime'}
my_fruts_ty = {'banana', 'apple', 'lime'}

Можно через магический метод __getitem__(2) можно обратиться к элементу (получить элемент)
но только через список &#91;]

**Создание пустого набора**
my_set = set()
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Методы наборов</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>.add(element)</code> - добавляет элемент в набор.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.remove(element)</code> - удаляет элемент из набора. Если элемент отсутствует, вызывает ошибку.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.discard(element)</code> - удаляет элемент из набора, если он присутствует. Если элемент отсутствует, не вызывает ошибку.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.pop()</code> - удаляет и возвращает случайный элемент из набора.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.clear()</code> - удаляет все элементы из набора.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.copy()</code> - создает копию набора.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.union(set)</code> - объединение наборов</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.intersection(set)</code> - возвращает новый набор, содержащий только элементы, которые присутствуют и в исходном наборе, и в указанном наборе.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.difference(set)</code> - возвращает новый набор, содержащий только элементы, которые присутствуют в исходном наборе, но отсутствуют в указанном наборе.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.symmetric_difference(set)</code> - возвращает новый набор, содержащий только элементы, которые присутствуют в одном из наборов, но отсутствуют в обоих наборах одновременно.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.issubset(set)</code> - возвращает <code>True</code>, если все элементы исходного набора присутствуют в указанном наборе, иначе возвращает <code>False</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.issuperset(set)</code> - возвращает <code>True</code>, если все элементы указанного набора присутствуют в исходном наборе, иначе возвращает <code>False</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>.isdisjoint(set)</code> - возвращает <code>True</code>, если исходный набор и указанный набор не имеют общих элементов, иначе возвращает <code>False</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1380</wp:post_id>
		<wp:post_date><![CDATA[2023-12-26 00:56:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-25 21:56:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-26 00:56:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-25 21:56:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pyatyj-den-obucheniya-25-12-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День шестой 27,12,2023]]></title>
		<link>https://achkasovwebmagic.ru/den-shestoj-27-12-2023/</link>
		<pubDate>Wed, 27 Dec 2023 16:56:37 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1383</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Диапазоны range</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Это типы последовательности.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Диапазон это упорядоченная неизменяемая последовательность элементов.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Диапазоны используются в циклах</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_range = range(7)
print(my_range)
#range(0, 7)

print(type(my_range))
#&lt;class 'range'&gt;

print(list(my_range))
#&#91;0, 1, 2, 3, 4, 5, 6]

**В диапазоне задается начальное, конечное значение и шаг.** 
Пример:
my_range = range(7, 30, 3)
print(my_range)
#&#91;7, 10, 13, 16, 19, 22, 25, 28]

Можно получать элемент диапазона по индексу:
my_range = range(7, 30, 3)
print(my_range&#91;5])
#22
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Методы диапазонов</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Диапазоны в Python обладают некоторыми полезными методами:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>start</code>: Возвращает начальное значение диапазона.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>stop</code>: Возвращает конечное значение диапазона.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>step</code>: Возвращает шаг диапазона.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__contains__(value)</code>: Проверяет, содержит ли диапазон указанное значение.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__len__()</code>: Возвращает длину диапазона.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>__getitem__(index)</code>: Возвращает элемент диапазона по указанному индексу.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Пример использования методов:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_range = range(7, 30, 3)
print(my_range.start)
# 7

print(my_range.stop)
# 30

print(my_range.step)
# 3

print(22 in my_range)
# True

print(len(my_range))
# 8

print(my_range&#91;5])
# 22

</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Встроенная функция zip</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Объединение последовательностей в одну</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>frutis = &#91;'banana', 'apple', 'lime']

quantities = &#91;100, 101, 545]

frutis_qtys_zip = zip(frutis, quantities)
print(frutis_qtys_zip)
#&lt;zip object at 0x0000024980AE2440&gt;

frutis_qtys_list = list(frutis_qtys_zip)

print(frutis_qtys_list)
#&#91;('banana', 100), ('apple', 101), ('lime', 545)] **получаем список кортежей

Конвертация zip объекта в словарь:**
frutis = &#91;'banana', 'apple', 'lime']
quantities = &#91;100, 101, 545]
frutis_qtys_zip = zip(frutis, quantities)
print(frutis_qtys_zip)

frutis_qtys_list = dict(frutis_qtys_zip)
print(frutis_qtys_list)
#{'banana': 100, 'apple': 101, 'lime': 545}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Переменная содержит ссылку на объект</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Переменные могут ссылаться на один и тот же объект в пайтон</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1383</wp:post_id>
		<wp:post_date><![CDATA[2023-12-27 19:56:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-27 16:56:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-27 19:56:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-27 16:56:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-shestoj-27-12-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День седьмой 28.12.2023]]></title>
		<link>https://achkasovwebmagic.ru/den-sedmoj-28-12-2023/</link>
		<pubDate>Thu, 28 Dec 2023 18:05:37 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1385</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Функции def</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Функция это блок кода который можно выполнять многократно</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def sum(a, b):
	c = a + b
	print(c)

a = 5
b = 3

sum(a, b) #8

a = 8
b = 12

sum(a, b) #20
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Функция возвращает none если нет ключевого слова return</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Функцию нужно вызвать для того что бы выполнить код внутри функции</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>У функции может не быть параметров. Так же можно не вызывать функцию return</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def my_fn(a, b):
	a = a + 1
	с = a + b
	return с

res = my_fn(10, 2)
print(res)
#13

1. Параметрам 'a' и 'b' присваиваются значения 10 и 2
2. Значение 'a' увеличивается на 1
3. Сумма значений 'a' и 'b' присваеватеся новой переменной 'c'
4. Возращается значение 'c'
5. Результат вызова функции присваевается переменной 'res'
6. Значение переменной 'res' выводится в терминал
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Самая короткая функция</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В синтаксисе пайтон обязательно должна быть хотя бы одна строка в функции. Pass это просто ключевое слово, что бы тело функции не было пустым.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def my_fn():
		pass

print(my_fn())
#None
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Передача неизменяемых объектов</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def my_fn(a, b):
	a = a + 1
	c = a + b
	return c

num_one = 10
num_two = 2

res = my_fn(num_one, num_two)
print(res)
print(num_one)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Передача изменяемых объектов</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def increase_person_age(person):
	person&#91;'age'] += 1
	return person

person_one = {
	'name': 'Bob',
	'age': 21
}

increase_person_age(person_one)
print(person_one&#91;'age'])
#22

Функция изменяет внешний объект. 
Не рекомендуется внутри функции изменять внешний объект
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Как избежать изменения внутри функции внешнего объекта</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Создание копии объекта</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Метод .copy создает только поверхностную копию</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def increase_person_age(person):
	person_copy = person.copy()
	person_copy&#91;'age'] += 1
	return person_copy

person_one = {
	'name': 'Bob',
	'age': 21
}

new_person = increase_person_age(person_one)
print(new_person&#91;'age'])
#22
print(person_one&#91;'age'])
#21
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Объединение списков в Python</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Для объединения списков в Python можно использовать оператор "+". Он позволяет просто складывать два списка в один.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>list1 = &#91;1, 2, 3]
list2 = &#91;4, 5, 6]

result = list1 + list2
print(result)
#&#91;1, 2, 3, 4, 5, 6]

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Также можно использовать метод "extend()", который добавляет элементы в конец списка.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>list1 = &#91;1, 2, 3]
list2 = &#91;4, 5, 6]

list1.extend(list2)
print(list1)
#&#91;1, 2, 3, 4, 5, 6]

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Обратите внимание, что при использовании метода "extend()" исходный список будет изменен, в то время как при использовании оператора "+" будет создан новый список.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1385</wp:post_id>
		<wp:post_date><![CDATA[2023-12-28 21:05:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-28 18:05:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-28 21:05:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-28 18:05:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-sedmoj-28-12-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День восьмой 22,01,2024]]></title>
		<link>https://achkasovwebmagic.ru/den-vosmoj-22-01-2024/</link>
		<pubDate>Mon, 22 Jan 2024 15:57:15 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1394</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Аргументы функций</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def sum_nums(a, b):
		c = a + b
		return (c)
print(sum_nums(2, 5))
#7

**Может ли функция принимать любое количество аргументов?**
Да, вот пример:
def sum_nums(*args):
	print(args)
#(2, 5, 7)
	print(type(args))
#&lt;class 'tuple'&gt;
	print(args&#91;0])
#2
	return sum(args)

print(sum_nums(2, 5, 7))
#14
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Позиционные аргументы:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Порядок аргументов важен. get_posts_info('Aleksey', 25)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def get_posts_info(name, pists_qty):
	info = f"{name} wrote {pists_qty} posts"
	return info

info = get_posts_info('Aleksey', 25)
print(info)
#Aleksey wrote 25 posts
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Аргументы с ключевыми словами</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Перед аргументами, идет ключевое слово (ключ): get_posts_info(name='Aleksey', pists_qty=25)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В таком случае порядок следования не важен</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def get_posts_info(name, pists_qty):
	info = f"{name} wrote {pists_qty} posts"
	return info

info = get_posts_info(name='Aleksey', pists_qty=25)
print(info)
#Aleksey wrote 25 posts
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Объединение именованных аргументов словарь dict</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def get_posts_info(**person):
	print(person) #{'name': 'Aleksey', 'post_qty': 25}
	print(type(person)) #&lt;class 'dict'&gt;
	info = (
		f"{person&#91;'name']} wrote "
		f"{person&#91;'post_qty']} posts"
	)

	return info

info = get_posts_info(name='Aleksey', post_qty=25)
print(info)
#Aleksey wrote 25 posts
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Значения параметров функции по умолчанию</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В таком случае второй параметр не обязателен</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def mult_by_factor(value, multiplier=1):
	return value * multiplier

print(mult_by_factor(10, 5))
#50
print(mult_by_factor(5))
#5

**Новый пример:**

from datetime import date
def get_weekday():
	return date.today().strftime('%A')

def create_new_post(post, weekday=get_weekday()):
	post_copy = post.copy() 

#Метод копирования вызывается потому что внутри функции 
#вызывается словарь, а это изменяемый объект. И что бы его не менять, создается копия

	post_copy&#91;'created_on_weekday'] = weekday
	return post_copy

initial_post = {
	'id': 234,
	'autor': 'Aleksey',
}

post_with_weekday = create_new_post(initial_post)

print(post_with_weekday)

#{'id': 234, 'autor': 'Aleksey', 'created_on_weekday': 'Wednesday'}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Колбэк функции</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Это функция, которая передается в другую функцию как аргумент</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def other_fn():
	pass

def fn_with_collback(collback_fn):
	collback_fn()
	return collback_fn

fn_with_collback(other_fn)

print(id(fn_with_collback))

print(id(other_fn))

Функция print_number_info это колбэк функция, которая вызывается внутри process_number

def print_number_info(num):
	if (num % 2) == 0:
		print("Entered number is even")
	else:
		print("Entered number is odd")

def process_number(num, callback_fn):
	callback_fn(num)

entered_num = int(input('Введите значение'))

process_number(entered_num, print_number_info)
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1394</wp:post_id>
		<wp:post_date><![CDATA[2024-01-22 18:57:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-22 15:57:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-22 18:57:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-22 15:57:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-vosmoj-22-01-2024]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[WordPress: Секреты Бизнес-Роста от Разработчика]]></title>
		<link>https://achkasovwebmagic.ru/wordpress-sekrety-biznes-rosta-ot-razrabotchika/</link>
		<pubDate>Tue, 23 Jan 2024 12:03:56 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1397</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Привет, друзья! Сегодня я хочу поговорить с вами о мире WordPress в веб-разработке и тем, как эта платформа становится мощным инструментом для улучшения бизнес-процессов. Как разработчик сайтов на WordPress, я не могу не поделиться своим опытом и убежденностью в его превосходстве.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Что такое WordPress?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress - мой верный союзник в создании веб-проектов. Начиная свой путь как платформа для блогов, он превратился в полноценное решение для разработки сайтов различной сложности. Для меня это не просто CMS, это инструмент, который существенно упрощает жизнь разработчика.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Почему WordPress - мой выбор в веб-разработке:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><em><strong>Простота в использовании</strong>:</em> Даже если клиент не имеет глубоких знаний веб-разработки, WordPress предоставляет удобный интерфейс и готовые шаблоны, что позволяет быстро создавать качественные сайты.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><em><strong>Расширяемость</strong>:</em> С огромным количеством плагинов и тем, я могу адаптировать сайт под конкретные потребности заказчика. Это позволяет создавать уникальные и функциональные веб-проекты.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><em><strong>Поддержка сообщества</strong>:</em> В мире WordPress существует огромное сообщество разработчиков и пользователей. Здесь я всегда могу найти ответы на свои вопросы, делиться опытом и участвовать в развитии этой отличной платформы.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><em><strong>Оптимизация для поисковых систем (SEO)</strong>:</em> WordPress предоставляет все необходимые инструменты для оптимизации контента, что помогает сайтам подниматься в поисковых результатах.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>В заключение:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Это не просто введение в мир WordPress, а призыв присоединиться к опыту использования этой замечательной платформы. В следующих статьях я буду делись своим опытом и лучшими практиками разработки на WordPress. Давайте вместе создадим нечто уникальное!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1397</wp:post_id>
		<wp:post_date><![CDATA[2024-01-23 15:03:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-23 12:03:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-23 15:06:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-23 12:06:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-sekrety-biznes-rosta-ot-razrabotchika]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="biznesonlajn"><![CDATA[БизнесОнлайн]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[wordpress-sila-v-prostote-dlya-vashego-biznesa]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Готовлюсь к путешествию: поход по пути святого Иакова в Испании в сентябре]]></title>
		<link>https://achkasovwebmagic.ru/gotovljus-k-puteshestviju-pohod-po-puti-svyatogo-iakova-v-ispanii-v-sentyabre/</link>
		<pubDate>Sat, 27 Jan 2024 13:57:27 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1401</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Привет друзья! Сентябрь несет с собой обещание захватывающего путешествия, и я, решил поделиться с вами своей подготовкой к походу по пути святого Иакова в Испании. В этой статье я расскажу вам о том, как я готовлюсь к этому уникальному опыту, придерживаясь основных принципов подготовки и ориентируясь на собственный комфорт и безопасность.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1. Физическая подготовка для пути в Сантьяго-де-Компостела:</strong> До сентября еще долго но я уже начал подготовку и внедрил в свой режим занятий утренние и вечерние тренировки. Это длительные походы по 4-12 км в день по пересеченной местности с целью развития выносливости в организме. Это помогает укрепить физическую форму и подготовить ноги к долгим походам по красивым испанским пейзажам.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2. Экипировка для Комфортного Путешествия:</strong> В моем арсенале — прочный износостойкий рюкзак фирмы Gregory, надежные ботинки, устойчивые к влаге, и практичная одежда в основном из флиса и мембраны. Основное правило — легкость и функциональность. Нацеленность на комфорт поможет максимально насладиться каждым этапом маршрута.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>3. Планирование маршрута с учетом собственных возможностей:</strong> Изучив различные варианты путей, я выбрал маршрут из Португалии в Испанию, из города Порту в Сантьяго-де-Компостела, соответствующий моей физической подготовке и личным интересам. План Б всегда на страже, чтобы быть готовым к любым сюрпризам маршрута. План Б - подъехать от Порту к городу Виго.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>4. Питание и вода для энергии:</strong> Мое питание — это не только вкусно, но и энергично. Сбалансированный рацион с белками, углеводами и витаминами. Заранее продуманный запас воды и знание мест ее добычи обеспечивают необходимое увлажнение в пути.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>5. Забота о здоровье на пути:</strong> Здоровье на первом месте. Перед походом — сбор аптечки с необходимыми медикаментами. Готов к предстоящим физическим нагрузкам.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>6. Ориентирование на пути следования:</strong> Навыки ориентирования — ключ к беззаветному наслаждению природой. Изучил маршрут, научился пользоваться компасом и топографическими картами. Готов к самостоятельным исследованиям.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Сентябрь уже близок, и я с нетерпением ожидаю момента, когда окажусь на пути святого Иакова в Испании. Мой опыт подготовки может быть вдохновением для тех, кто мечтает отправиться в подобное путешествие. Следите за моими приключениями в блоге — впереди невероятные истории и фотографии средиземноморского путешествия! ¡Buen Camino! 🌄👣</p>
<!-- /wp:paragraph -->

<!-- wp:gallery {"columns":2,"linkTo":"none"} -->
<figure class="wp-block-gallery has-nested-images columns-2 is-cropped"><!-- wp:image {"id":1404,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/2-1024x683.webp" alt="" class="wp-image-1404"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1407,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/3-1024x683.jpg" alt="" class="wp-image-1407"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1409,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/4-1024x682.jpg" alt="" class="wp-image-1409"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1405,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/5-1024x668.jpg" alt="" class="wp-image-1405"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1406,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/6-1024x666.jpeg" alt="" class="wp-image-1406"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1408,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/7.jpg" alt="" class="wp-image-1408"/></figure>
<!-- /wp:image --></figure>
<!-- /wp:gallery -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1401</wp:post_id>
		<wp:post_date><![CDATA[2024-01-27 16:57:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-27 13:57:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-23 17:30:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-23 14:30:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gotovljus-k-puteshestviju-pohod-po-puti-svyatogo-iakova-v-ispanii-v-sentyabre]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="zhizn-kak-ona-est"><![CDATA[Жизнь как она есть]]></category>
		<category domain="post_tag" nicename="marshrut"><![CDATA[Маршрут]]></category>
		<category domain="post_tag" nicename="podgotovka-k-pohodu"><![CDATA[Подготовка к походу]]></category>
		<category domain="post_tag" nicename="pohod"><![CDATA[Поход]]></category>
		<category domain="post_tag" nicename="put-svyatogo-iakova"><![CDATA[Путь святого Иакова]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="santyago-de-kompostela"><![CDATA[Сантьяго-де-Компостела]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1402]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Как создать адаптивную тему в WordPress: Практическое руководство с нуля]]></title>
		<link>https://achkasovwebmagic.ru/kak-sozdat-adaptivnuju-temu-v-wordpress-prakticheskoe-rukovodstvo-s-nulya/</link>
		<pubDate>Wed, 24 Jan 2024 15:13:31 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1462</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Создание адаптивной темы в WordPress — это важный шаг для обеспечения удобства использования вашего сайта на всех устройствах. В этом практическом руководстве мы рассмотрим, как создать тему с нуля, с акцентом на адаптивный дизайн.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Шаг 1: Подготовка рабочей среды</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Прежде всего, убедитесь, что у вас установлен и настроен WordPress. Создайте пустую папку для вашей новой темы в директории <code>wp-content/themes/</code> вашего сайта.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Шаг 2: Создание основных файлов темы</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ваша тема будет состоять из нескольких ключевых файлов. Создайте файл <code>style.css</code> для стилей, а также файл <code>index.php</code> в качестве основного файла темы. В <code>style.css</code> укажите информацию о теме, такую как название, автор и описание.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Шаг 3: Добавление HTML-структуры</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Откройте файл <code>index.php</code> и начните добавлять базовую HTML-структуру вашего сайта. Включите необходимые теги <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> и <code>&lt;body&gt;</code>. Это служит основой для вашего дизайна.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Шаг 4: Использование CSS Grid или Flexbox для макета</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Выберите подходящий метод для создания макета вашего сайта: CSS Grid или Flexbox. Эти технологии обеспечат гибкий и адаптивный дизайн, позволяя легко управлять расположением элементов на различных устройствах.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Шаг 5: Медиазапросы для адаптивности</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Добавьте медиазапросы в ваш файл <code>style.css</code>, чтобы задать стили для различных размеров экранов. Это позволит вашему сайту отзываться на изменения размеров окна браузера и различные устройства.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>@media only screen and (max-width: 600px) {
  /* Стили для мобильных устройств */
}

@media only screen and (min-width: 601px) and (max-width: 1024px) {
  /* Стили для планшетов */
}

@media only screen and (min-width: 1025px) {
  /* Стили для настольных компьютеров */
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Шаг 6: Добавление адаптивных изображений</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Используйте атрибут <code>srcset</code> для изображений, чтобы предоставить браузеру несколько вариантов разрешения. Это обеспечит оптимальное отображение изображений на различных устройствах.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;img src="mobile-image.jpg" alt="Mobile Image" srcset="tablet-image.jpg 600w, desktop-image.jpg 1024w"></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Шаг 7: Тестирование на различных устройствах</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Перед развертыванием вашей темы проведите тестирование на различных устройствах. Это поможет выявить и устранить возможные проблемы с отображением на разных экранах.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Создание адаптивной темы в WordPress — это процесс, требующий внимания к деталям и тщательного тестирования. Следуя вышеописанным шагам, вы сможете разработать тему, которая обеспечит отличный пользовательский опыт на всех устройствах, что в свою очередь повысит удовлетворенность посетителей вашего сайта и улучшит его позиции в поисковых результатах.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>В следующих статьях я подробно распишу каждый шаг</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1462</wp:post_id>
		<wp:post_date><![CDATA[2024-01-24 18:13:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-24 15:13:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-24 18:13:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-24 15:13:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kak-sozdat-adaptivnuju-temu-v-wordpress-prakticheskoe-rukovodstvo-s-nulya]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="biznesonlajn"><![CDATA[БизнесОнлайн]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Подготовка рабочей среды для WordPress]]></title>
		<link>https://achkasovwebmagic.ru/podgotovka-rabochej-sredy-dlya-wordpress/</link>
		<pubDate>Thu, 25 Jan 2024 13:44:48 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1472</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>WordPress - это популярная система управления контентом (CMS), которая позволяет легко создавать и управлять сайтами. Прежде чем начать разработку темы, убедитесь, что вы установили и настроили WordPress. Давайте рассмотрим этот процесс пошагово.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Установка WordPress:</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Скачайте WordPress:</strong> Перейдите на официальный сайт WordPress (<a href="https://wordpress.org/">https://wordpress.org/</a>) и скачайте последнюю версию WordPress.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Разархивируйте файлы:</strong> Разархивируйте скачанный архив. Вы получите папку с файлами WordPress.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Переносите файлы:</strong> Перенесите все файлы WordPress на ваш веб-сервер. Это можно сделать с помощью FTP-клиента или средств управления файлами вашего хостинг-провайдера.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Создайте базу данных:</strong> Создайте базу данных для WordPress. В большинстве случаев это можно сделать через панель управления вашего хостинг-аккаунта. Запишите данные для подключения к базе данных (название базы данных, имя пользователя, пароль и адрес сервера).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Запустите установку:</strong> Введите адрес вашего сайта в браузере. Вы увидите страницу установки WordPress. Укажите данные базы данных, созданные на предыдущем шаге.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Завершите установку:</strong> Заполните необходимые поля, такие как название сайта, имя пользователя и пароль администратора. Завершите установку, следуя инструкциям.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Войдите в админ-панель:</strong> После завершения установки войдите в административную панель WordPress, используя данные учетной записи администратора.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Создание пустой папки для новой темы:</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Откройте FTP-клиент:</strong> Используйте FTP-клиент, чтобы подключиться к вашему серверу.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Перейдите в директорию themes:</strong> Навигируйтесь в папку wp-content/themes/ на вашем сервере.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Создайте папку для темы:</strong> Создайте новую папку с уникальным именем для вашей темы. Например, "my_custom_theme".</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Создание необходимых файлов в папке темы:</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>style.css:</strong> В созданной папке создайте файл style.css. Этот файл обязателен и содержит информацию о вашей теме, такую как название, автор и описание. Пример:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/*<br>Theme Name: My Custom Theme<br>Author: Your Name<br>Description: Custom WordPress theme.<br>*/</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>index.php:</strong> Создайте файл index.php. Этот файл является основным файлом для отображения содержимого вашего сайта.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Активация созданной темы:</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Войдите в админ-панель:</strong> Зайдите в админ-панель WordPress.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Перейдите в раздел "Внешний вид" -&gt; "Темы":</strong> Найдите вашу новую тему в списке установленных тем.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Активируйте тему:</strong> Выберите вашу тему и нажмите "Активировать".</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Теперь вы успешно создали папку для новой темы, создали необходимые файлы и активировали тему через админ-панель WordPress. В следующих шагах вы можете начать разрабатывать и настраивать внешний вид вашей темы.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1472</wp:post_id>
		<wp:post_date><![CDATA[2024-01-25 16:44:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-25 13:44:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-25 16:44:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-25 13:44:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[podgotovka-rabochej-sredy-dlya-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="ftp-klient-dlya-perenosa-fajlov"><![CDATA[FTP-клиент для переноса файлов]]></category>
		<category domain="post_tag" nicename="wordpress-cms"><![CDATA[WordPress CMS]]></category>
		<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpress-ustanovka"><![CDATA[WordPress установка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="admin-panel-wordpress"><![CDATA[Админ-панель WordPress]]></category>
		<category domain="post_tag" nicename="aktivaciya-temy-v-wordpress"><![CDATA[Активация темы в WordPress]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="nastrojka-bazy-dannyh-wordpress"><![CDATA[Настройка базы данных WordPress]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="post_tag" nicename="razrabotka-temy-dlya-wordpress"><![CDATA[Разработка темы для WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="sozdanie-temy-wordpress"><![CDATA[Создание темы WordPress]]></category>
		<category domain="post_tag" nicename="ustanovka-i-nastrojka-ftp-klienta"><![CDATA[Установка и настройка FTP-клиента]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Primera lección 19 de diciembre de 2023]]></title>
		<link>https://achkasovwebmagic.ru/es/primera-leccion-19-de-diciembre-de-2023/</link>
		<pubDate>Fri, 26 Jan 2024 12:38:18 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1491</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Lo más fundamental en la construcción del lenguaje Python son los objetos.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Python es un lenguaje de programación orientado a objetos (OOP).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>La idea principal es que todas las entidades son objetos.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Un objeto es una instancia de una clase específica.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Una clase es una plantilla (prototipo) para crear un objeto.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cada objeto tiene atributos.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Y cuando un atributo tiene una función, se llama método.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tipos principales en Python:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>**Principales tipos:**
- Cadena (str): 'Aleksey'
- Número entero (int): 10 o -100
- Tipo lógico (bool): true/false
- Lista (list): &#91;1, 2, 3] En las listas se pueden añadir cualquier tipo de valores.
- Diccionario (dict): {'min': 5, 'max': 8} - Clave-valor (min, max). En los diccionarios y listas puede haber cualquier cantidad de valores.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Funciones incorporadas:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Ejemplo de uso de la función incorporada print
print("Hallo Python")

# Funciones incorporadas y sus tipos de valores
# Si hay un argumento: "Si es una palabra", si hay dos o más: "Si son dos o más"
# Los parámetros se indican entre paréntesis después del nombre de la función

# Ejemplo de definición de una función personalizada my_fn
def my_fn(a, b):
    a = a + 1
    c = a + b
    # El resultado se devuelve mediante la palabra clave return
    return c

# Algunas funciones incorporadas
print()      # Imprime texto o una variable en la pantalla
type()      # Devuelve el tipo del objeto
id()        # Devuelve el identificador único del objeto
len()       # Devuelve la longitud del objeto (cantidad de elementos)
sum()       # Devuelve la suma de los elementos del objeto
input()     # Lee la entrada del usuario
round()     # Redondea un número al número de decimales especificado
min()       # Devuelve el valor mínimo del objeto
max()       # Devuelve el valor máximo del objeto
int()       # Convierte el valor a un número entero
str()       # Convierte el valor a una cadena de texto
bool()      # Convierte el valor a un tipo lógico (True o False)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>La función incorporada <code>dir</code> </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>en Python permite obtener una lista de todos los atributos de un objeto específico.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Ejemplo de uso de la función dir en el objeto name
name = 'Aleksey'
print(dir(name))

# Salida en la consola:
# &#91;'__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

# Ejemplo de aplicación del método upper al objeto
name = 'Aleksey'
print(name.upper())

# Salida en la consola:
# ALEKSEY</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Python - Sangrías en el código de Python</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Las sangrías juegan un papel muy importante.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Una sangría es equivalente a 4 espacios.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Ejemplo de código correcto:
def print_name_function(name):
    print(name)
# La sangría se crea con 4 espacios.

# Código incorrecto:
def print_name_function(name):
print(name)
# En este caso, falta la sangría, lo que hace que el código sea incorrecto.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Python - Formateo de código en Python</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>De acuerdo con el documento PEP8, que es la guía de estilo para Python (<a href="https://peps.python.org/pep-0008/">https://peps.python.org/pep-0008/</a>), se deben seguir las siguientes convenciones:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>Utilizar espacios en lugar de tabuladores para la indentación.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Limitar la longitud de las líneas a no más de 79 caracteres.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Dejar dos líneas en blanco entre funciones y clases y otras líneas de código.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Colocar las importaciones de módulos en líneas separadas.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Añadir al menos dos espacios antes de los comentarios al final de una línea de código.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Es importante seguir estas recomendaciones para mantener un código Python limpio y consistente.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1491</wp:post_id>
		<wp:post_date><![CDATA[2024-01-26 15:38:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-26 12:38:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-26 15:38:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-26 12:38:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[primera-leccion-19-de-diciembre-de-2023]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="language" nicename="es"><![CDATA[Español]]></category>
		<category domain="category" nicename="formacion-para-desarrollador-python"><![CDATA[Formación para desarrollador Python]]></category>
		<category domain="post_translations" nicename="pll_65b3a7bd55266"><![CDATA[pll_65b3a7bd55266]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[wbcr_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%d0%bf%d0%b5%d1%80%d0%b2%d1%8b%d0%b9-%d1%83%d1%80%d0%be%d0%ba-16102023]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[74]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Валидация инпутов на Python]]></title>
		<link>https://achkasovwebmagic.ru/validaciya-inputov-na-python/</link>
		<pubDate>Fri, 26 Jan 2024 14:54:08 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1494</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Разбирался сегодня с условными инструкциями if и else, и смог написать функцию валидации инпутов.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def print_image_info(image_info):
        print(f"Я {cat_value}, и фото моей собаки в архиве содержится под номером {image_value}")

def get_valid_input():
    while True:
        try:
            input_text = input("Введите ваше имя: ")
            # Проверяем, что введенная строка состоит из букв и не пуста
            if input_text.isalpha():
                return input_text
            else:
                print("Пожалуйста, введите корректное имя (буквы без пробелов).")
        except ValueError:
            print("Пожалуйста, введите корректное значение.")

input_text = get_valid_input()

def get_valid_input():
    while True:
        try:
            input_number = input("Введите значение картинки: ")
            # Проверяем, что введенная строка состоит из букв и не пуста
            if input_number.isdigit():
                return input_number
            else:
                print("Пожалуйста, введите корректное значение картинки.")
        except ValueError:
            print("Пожалуйста, введите корректное значение.")

input_number = get_valid_input()

image_info = {'cat': input_text, 'image': input_number}

cat_value = image_info.get('cat')
image_value = image_info.get('image')

print_image_info(image_info)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Функция создает список (dict), в который из полей передаются два параметра имя и номер изображения. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Первая функция print_image_info проверяет заполнены ли оба поля, если да, выводит текст: Я {cat_value}, и фото моей собаки в архиве содержится под номером {image_value}, где параметры из {} являются данными из input.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Если же одно поле не заполнено, выводится ошибка: Ошибка, одно из полей не заполнено</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Так же ниже идет регистрация и вывод полей инпутов, в которых происходит проверка на валидность значений. Первое поле проверяется методом isalpha(). Что означает проверку на вводимые значения только буквы. Второе поле инпут, проверяется методом isdigit() который проверяет на ввод данных именно цифры. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Если значения заполнены верно, код проходит дальше и выводит нужную строку, если же значения введенные в инпут не верны, код возвращает ошибку именно под тем полем, которое не верно и дает возможность заполнить заново не верное поле.</p>
<!-- /wp:paragraph -->

<!-- wp:video {"id":1495} -->
<figure class="wp-block-video"><video controls src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/main.py-C__Users_DiX-PC-Store_Desktop_pyhton_main.py-2024-01-26-16-52-26.mp4"></video></figure>
<!-- /wp:video -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1494</wp:post_id>
		<wp:post_date><![CDATA[2024-01-26 17:54:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-26 14:54:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-26 17:54:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-26 14:54:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[validaciya-inputov-na-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://achkasovwebmagic.ru/wp-content/uploads/2024/01/main.py-C__Users_DiX-PC-Store_Desktop_pyhton_main.py-2024-01-26-16-52-26.mp4
10316896
video/mp4
]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Добавление HTML-структуры в WordPress тему: подробное руководство]]></title>
		<link>https://achkasovwebmagic.ru/dobavlenie-html-struktury-v-wordpress-temu-podrobnoe-rukovodstvo/</link>
		<pubDate>Fri, 26 Jan 2024 15:55:27 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1497</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Теперь, когда базовые файлы темы созданы, переходим к созданию HTML-структуры, которая будет определять внешний вид вашего сайта. HTML-структура является основой, на которой строится весь контент. Разделим этот шаг на несколько подзадач и предоставим примеры кода для лучшего понимания.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1. Определение основной HTML-структуры:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Откройте файл <code>index.php</code> и добавьте следующую базовую HTML-структуру внутрь функции <code>the_content()</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
    &lt;meta charset="UTF-8">
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
    &lt;title>&lt;?php echo get_bloginfo('name'); ?>&lt;/title>
    &lt;?php wp_head(); // Подключение стилей и скриптов WordPress ?>
&lt;/head>
&lt;body &lt;?php body_class(); // Добавление классов к body ?>>
    &lt;header>
        &lt;h1>&lt;?php echo get_bloginfo('name'); ?>&lt;/h1>
        &lt;nav>
            &lt;?php
            // Подключение пользовательского меню
            wp_nav_menu(array(
                'theme_location' => 'main-menu',
                'container' => 'ul',
            ));
            ?>
        &lt;/nav>
    &lt;/header>
    &lt;main>
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код устанавливает основные мета-теги, заголовок страницы и подключает необходимые стили и скрипты WordPress. Заголовок и навигацию будем дорабатывать далее.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2. Добавление цикла WordPress для контента:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>        &lt;?php if (have_posts()) : ?>
            &lt;?php while (have_posts()) : the_post(); ?>
                &lt;article &lt;?php post_class(); // Добавление классов к посту ?>>
                    &lt;h2>&lt;?php the_title(); // Заголовок поста ?>&lt;/h2>
                    &lt;div class="post-content">
                        &lt;?php the_content(); // Контент поста ?>
                    &lt;/div>
                &lt;/article>
            &lt;?php endwhile; ?>
        &lt;?php endif; ?></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код использует цикл WordPress для отображения контента постов. Он выводит заголовок и содержимое каждого поста.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>3. Закрытие основной HTML-структуры:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>    &lt;/main>
    &lt;footer>
        &lt;p>&amp;copy; &lt;?php echo date('Y'); ?> &lt;?php echo get_bloginfo('name'); ?>&lt;/p>
    &lt;/footer>
    &lt;?php wp_footer(); // Подключение скриптов WordPress ?>
&lt;/body>
&lt;/html></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот фрагмент кода закрывает основную HTML-структуру, добавляет футер и подключает необходимые скрипты WordPress.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>4. Добавление пользовательских стилей:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В файле <code>style.css</code> вы можете стилизовать вашу HTML-структуру. Например, чтобы добавить стили для заголовка:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>h1 {
    color: #333;
    font-size: 28px;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Эти шаги создают основу HTML-структуры вашей темы. По мере развития проекта, вы можете дорабатывать и дополнять эту структуру, чтобы соответствовать вашему дизайну и функциональности. Продолжайте следить за последующими шагами, чтобы улучшать и адаптировать вашу тему в WordPress.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1497</wp:post_id>
		<wp:post_date><![CDATA[2024-01-26 18:55:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-26 15:55:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-26 18:55:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-26 15:55:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dobavlenie-html-struktury-v-wordpress-temu-podrobnoe-rukovodstvo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="wordpress-cms"><![CDATA[WordPress CMS]]></category>
		<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[JamesMal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[judsmpgyhKn@smmhost.space]]></wp:comment_author_email>
			<wp:comment_author_url>https://mebel-finest.ru/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[104.28.198.245]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-01-30 13:43:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-01-30 10:43:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Заказать двери на заказ в Москве 
Производство дверей на заказ по индивидуальным размерам 
Как выбрать дверей на заказ 
Виды и оттенки дверей на заказ 
Двери на заказ: доставка и монтаж дверей на заказ 
Какие факторы влияют на выбор дверей на заказ? варианты дверей на заказ 
Шпонированные двери на заказ: преимущества и недостатки 
Металлические двери на заказ: надежность и безопасность 
Двери на заказ у мастеров-ремесленников 
Двери цены в розницу <a href="http://www.mebel-finest.ru/" / rel="nofollow ugc">http://www.mebel-finest.ru/</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[kriterii_nuOn]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ydqmjwcueOn@doctor-stiralok.ru]]></wp:comment_author_email>
			<wp:comment_author_url>https://koah.ru/volkov/11.htm</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.197.74.148]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-02-05 17:43:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-02-05 14:43:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Маски и истинное лицо 
критерии истины <a href="https://www.koah.ru/koret/74.htm" rel="nofollow ugc">https://www.koah.ru/koret/74.htm</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Использование CSS Grid и Flexbox для Макета в Разработке Сайтов на WordPress]]></title>
		<link>https://achkasovwebmagic.ru/ispolzovanie-css-grid-i-flexbox-dlya-maketa-v-razrabotke-sajtov-na-wordpress/</link>
		<pubDate>Mon, 29 Jan 2024 14:07:08 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1499</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Создание привлекательного и функционального веб-сайта важно для успешного присутствия в интернете. WordPress является одной из самых популярных платформ для создания сайтов, и управление его внешним видом и структурой может быть легко достигнуто с использованием CSS Grid и Flexbox. В этой статье мы рассмотрим, как эти два мощных инструмента могут быть применены для создания эффективного макета веб-страниц на WordPress.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">CSS Grid и Flexbox: Основы</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>CSS Grid</strong> предоставляет двумерную сетку, которая легко управляет распределением элементов на странице. Он особенно полезен для создания сложных макетов, где необходимо управление как столбцами, так и строками.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Flexbox</strong>, с другой стороны, предназначен для управления распределением элементов в одной измеренной линии (или строке или столбце). Это отлично подходит для создания гибких и адаптивных макетов.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Почему выбор между Grid и Flexbox важен?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Выбор между CSS Grid и Flexbox зависит от конкретных требований макета. В большинстве случаев они могут быть использованы в сочетании для достижения наилучших результатов.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>CSS Grid</strong> подходит для сложных макетов, где необходимо управление как по горизонтали, так и по вертикали. Это может быть полезно, например, при создании многоколоночных макетов.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Flexbox</strong> лучше всего подходит для управления элементами внутри контейнера в одной линии. Это может быть полезно для создания гибких блоков с переменной шириной и высотой.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Применение CSS Grid в WordPress</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Создание контейнера Grid:</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 20px;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере мы создаем контейнер с тремя столбцами, каждый из которых занимает одну равную долю (1fr), и добавляем зазор между столбцами.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2. Размещение элементов в Grid:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>.grid-item {
  grid-column: span 2;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код устанавливает для элемента в Grid значение <code>grid-column: span 2;</code>, что означает, что элемент должен занимать два столбца.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>3. Медиазапросы для адаптивности:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>@media screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Мы можем использовать медиазапросы для изменения макета при меньших экранах.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Применение Flexbox в WordPress</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>Создание контейнера Flexbox:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>.flex-container {
  display: flex;
  justify-content: space-between;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере мы создаем контейнер Flexbox с выравниванием элементов по краям.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Гибкое распределение пространства:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>.flex-item {
  flex: 1;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код делает элемент гибким, занимая доступное пространство внутри контейнера.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Адаптивность с помощью Flexbox:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>@media screen and (max-width: 768px) {
  .flex-container {
    flex-direction: column;
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Медиазапрос изменяет направление Flexbox на вертикальное при уменьшении экрана.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Заключение</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Использование CSS Grid и Flexbox в WordPress предоставляет разработчикам мощные средства для создания гибких и адаптивных макетов. Выбор между ними зависит от требований конкретного проекта, и часто лучший результат достигается при их комбинированном использовании. Современные технологии в сочетании с популярной CMS, такой как WordPress, открывают широкие возможности для креативной разработки веб-сайтов.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1499</wp:post_id>
		<wp:post_date><![CDATA[2024-01-29 17:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-29 14:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-29 17:07:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-29 14:07:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ispolzovanie-css-grid-i-flexbox-dlya-maketa-v-razrabotke-sajtov-na-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="wordpress-cms"><![CDATA[WordPress CMS]]></category>
		<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День девять 26,01,2024]]></title>
		<link>https://achkasovwebmagic.ru/den-devyat-26-01-2024/</link>
		<pubDate>Mon, 29 Jan 2024 20:16:32 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1501</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Логические операторы</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В Python доступны следующие логические операторы:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>and</code> (и) - возвращает <code>True</code>, если оба операнда истинны, иначе возвращает <code>False</code>. Унарный оператор (Означает что внутри только один операнд.)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>or</code> (или) - возвращает <code>True</code>, если хотя бы один из операндов истинен, иначе возвращает <code>False</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>not</code> (не) - возвращает <code>True</code>, если операнд ложен, иначе возвращает <code>False</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Примеры использования:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = True
y = False

print(x and y)  # False
print(x or y)   # True
print(not x)    # False
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Оператор not чаще всего используется в условиях if</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = True
y = False

print(not x)    # False
print(not y)    # True
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Если использовать not not, тогда мы сконвертируем в логическое значение (оценка ложности значений)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Операторы and и or, это операторы короткого замыкания</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Операторы имеют 2 операнда</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>a = True
b = False
c = True

print(a and b or c)  # True
print(a or b and c)  # True
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Оператор распаковки словаря</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Оператор <code>**</code> позволяет распаковывать словари.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Примеры использования операторов:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>button = {
	'width' : 200,
	'text' : 'Buy'
}

red_button = {
	**button,
	'color': 'red'
}

print(red_button)
#{'width': 200, 'text': 'Buy', 'color': 'red'}

Если сменить цвет несколько раз, останется тот цвет(атрибу) который указан в конце
button = {
	'width' : 200,
	'text' : 'Buy'
}

red_button = {
	**button,
	'color': 'red'
}

blu_red_button = {
	**red_button,
	'color': 'blue'
}

print(blu_red_button)
#{'width': 200, 'text': 'Buy', 'color': '**blue'**}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Объединение словарей оператором распаковки</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>button = {
	'width' : 200,
	'text' : 'Buy'
}

red_button = {
	**button,
	'height': '560'
}

blu_red_button = {
	**red_button,
	**button
}

print(blu_red_button)
#{'width': 200, 'text': 'Buy', 'height': '560'}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Есть еще вариант объединения словарей через | (ровный слеш)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>button = {
	'width' : 200,
	'text' : 'Buy'
}

red_button = {
	'height': '560'
}

blu_red_button = button | red_button

print(blu_red_button)
#{'width': 200, 'text': 'Buy', 'height': '560'}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Инструкция del</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>Инструкция del</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Инструкция <code>del</code> в Python используется для удаления элементов из списка, словаря или переменных. Вот некоторые примеры использования:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Удаление элемента из списка:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>numbers = &#91;1, 2, 3, 4, 5]
del numbers&#91;2]
print(numbers)  # &#91;1, 2, 4, 5]

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Удаление элемента из словаря:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>person = {'name': 'John', 'age': 30, 'city': 'New York'}
del person&#91;'age']
print(person)  # {'name': 'John', 'city': 'New York'}

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Удаление переменной:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = 10
del x
print(x)  # NameError: name 'x' is not defined

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Инструкция <code>del</code> также может использоваться для удаления срезов (частей) списка:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>numbers = &#91;1, 2, 3, 4, 5]
del numbers&#91;1:3]
print(numbers)  # &#91;1, 4, 5]

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Инструкция <code>del</code> является мощным инструментом для управления данными в Python и может быть полезной при очистке памяти или удалении ненужных элементов.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Соединение строк</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>Метод <code>join()</code></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Метод <code>join()</code> в Python используется для объединения (соединения) строк из списка или кортежа в одну строку. Он принимает список или кортеж в качестве аргумента и возвращает новую строку, в которой элементы списка (или кортежа) объединены с помощью указанного разделителя.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования метода <code>join()</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>fruits = &#91;'apple', 'banana', 'orange']
result = ', '.join(fruits)
print(result)  # 'apple, banana, orange'

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В приведенном примере, метод <code>join()</code> используется для объединения строк из списка <code>fruits</code>. Разделитель, в данном случае запятая с пробелом <code>', '</code>, указывается внутри метода <code>join()</code>. Результатом будет новая строка <code>'apple, banana, orange'</code>, в которой элементы списка <code>fruits</code> объединены с указанным разделителем.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Метод <code>join()</code> также может использоваться для объединения строк без указания разделителя. В этом случае, метод <code>join()</code> просто объединяет строки в одну строку без добавления дополнительных символов.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>words = &#91;'Hello', 'world']
result = ''.join(words)
print(result)  # 'Helloworld'

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, метод <code>join()</code> используется для объединения строк из списка <code>words</code>. Поскольку не указан разделитель, элементы списка объединяются непосредственно друг с другом, и результатом будет новая строка <code>'Helloworld'</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Метод <code>join()</code> является удобным инструментом для объединения строк из списка или кортежа в одну строку с помощью указанного разделителя.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Форматирование строк</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Форматирование строк с использованием f-строк является еще одним полезным функционалом в Python. F-строки позволяют вставлять значения переменных непосредственно в строку с помощью фигурных скобок <code>{}</code> и префикса <code>f</code> перед строкой. Это позволяет создавать динамические строки, в которых значения будут заменяться на актуальные значения переменных.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования f-строк:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>name = "Alice"
age = 25

message = f"My name is {name} and I am {age} years old."
print(message)  # "My name is Alice and I am 25 years old."

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В данном примере, переменные <code>name</code> и <code>age</code> вставляются в строку с помощью фигурных скобок. Значения переменных будут автоматически подставлены в соответствующие места в строке при выполнении программы.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>F-строки также поддерживают выражения и операции внутри фигурных скобок. Это позволяет выполнять более сложные операции при форматировании строк.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = 10
y = 5

result = f"The sum of {x} and {y} is {x + y}."
print(result)  # "The sum of 10 and 5 is 15."

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, выражение <code>x + y</code> вычисляется внутри фигурных скобок и результат подставляется в соответствующее место в строке.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Использование f-строк является удобным и эффективным способом форматирования строк в Python.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>my_name = 'Aleksey'
my_hobby = 'running'
time = 8

info = my_name + ' likes ' + my_hobby + ' at ' + str(time) + ' o clock'
info2 = f"{my_name} likes {my_hobby} at {str(time)} o clock"

print(info)
print(info2)

#Aleksey likes running at 8 o clock
#Aleksey likes running at 8 o clock
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В f строках можно не конвертировать информацию в строке. Так как f строки сами конвертируют данные</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Лямбда функции</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Лямбда функции в Python - это анонимные функции, которые могут быть определены в одной строке кода без необходимости использования ключевого слова <code>def</code>. Они обычно используются в качестве аргументов для других функций или в выражениях, где требуется короткая и простая функция.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования лямбда функции:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Обычное определение функции
def square(x):
    return x ** 2

# Использование лямбда функции
square_lambda = lambda x: x ** 2

print(square(5))          # 25
print(square_lambda(5))   # 25

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере определена функция <code>square</code> с использованием ключевого слова <code>def</code>, которая возвращает квадрат числа <code>x</code>. Также определена лямбда функция <code>square_lambda</code>, которая делает то же самое. Оба варианта возвращают результат 25 при вызове с аргументом 5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Лямбда функции могут принимать любое количество аргументов, но они всегда должны содержать одно выражение, которое будет вычисляться и возвращаться как результат. Это делает их компактными и удобными для использования в простых случаях.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Лямбда функция с двумя аргументами
addition = lambda x, y: x + y

print(addition(3, 5))   # 8

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере определена лямбда функция <code>addition</code>, которая принимает два аргумента <code>x</code> и <code>y</code> и возвращает их сумму.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Лямбда функции могут быть полезными, когда требуется определить простую функцию на лету или когда функция используется только в одном месте и нет необходимости в ее именовании.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Пример использования лямбда функции в качестве аргумента
numbers = &#91;1, 2, 3, 4, 5]

# Использование функции sorted с лямбда функцией в качестве ключа сортировки
sorted_numbers = sorted(numbers, key=lambda x: x % 2 == 0)

print(sorted_numbers)   # &#91;1, 3, 5, 2, 4]

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере функция <code>sorted</code> используется для сортировки списка <code>numbers</code>, а в качестве ключа сортировки используется лямбда функция, которая возвращает <code>True</code>, если число <code>x</code> является четным.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Лямбда функции предоставляют удобный и гибкий способ определения простых функций в Python.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Обработка ошибок</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>В программировании ошибки могут возникать во время выполнения программы. Хорошим программистом является тот, кто предусматривает возможность возникновения ошибок и обрабатывает их правильно. В Python для обработки ошибок используется конструкция <code>try-except</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Конструкция <code>try-except</code> позволяет программе перехватывать и обрабатывать исключения (ошибки), которые могут возникнуть в блоке кода, помещенном внутри <code>try</code>. Если в блоке <code>try</code> происходит исключение, то программа переходит к блоку <code>except</code>, где можно указать код для обработки этого исключения.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования конструкции <code>try-except</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>try:
    # Блок кода, в котором возможно возникновение исключения
    x = 10 / 0
except ZeroDivisionError:
    # Блок кода для обработки исключения ZeroDivisionError
    print("Ошибка деления на ноль")

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере блок кода внутри <code>try</code> делит число 10 на ноль, что приводит к возникновению исключения <code>ZeroDivisionError</code>. Однако блок <code>except ZeroDivisionError</code> перехватывает это исключение и выводит сообщение о ошибке.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Конструкция <code>try-except</code> может иметь несколько блоков <code>except</code>, каждый из которых обрабатывает определенный тип исключения. Также можно указать блок <code>else</code>, который будет выполняться, если исключение не возникло.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>try:
    # Блок кода, в котором возможно возникновение исключения
    x = int(input("Введите число: "))
    result = 10 / x
except ZeroDivisionError:
    # Блок кода для обработки исключения ZeroDivisionError
    print("Ошибка деления на ноль")
except ValueError:
    # Блок кода для обработки исключения ValueError
    print("Ошибка ввода числа")
else:
    # Блок кода, который выполняется, если исключение не возникло
    print("Результат:", result)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере программа запрашивает у пользователя число, а затем делит число 10 на введенное число. Если пользователь вводит ноль, возникает исключение <code>ZeroDivisionError</code>, и программа выводит сообщение об ошибке. Если пользователь вводит нечисловое значение, возникает исключение <code>ValueError</code>, и также выводится сообщение об ошибке. В противном случае программа выводит результат деления.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Конструкция <code>try-except</code> позволяет предусмотреть и обработать возможные ошибки в программе, делая ее более надежной и устойчивой к непредвиденным ситуациям.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>В программировании существует несколько типов ошибок, которые могут возникать во время выполнения программы. Некоторые из наиболее распространенных типов ошибок в Python включают:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>SyntaxError</code> (Синтаксическая ошибка): Происходит, когда в коде обнаруживается синтаксическая ошибка, такая как неправильное использование ключевых слов, отсутствие двоеточия или неправильное расположение операторов.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>NameError</code> (Ошибка имени): Возникает, когда используется неопределенное имя или переменная.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TypeError</code> (Ошибка типа): Происходит, когда операция применяется к объекту неправильного типа, или когда функция вызывается с неправильным количеством аргументов или аргументами неправильного типа.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ZeroDivisionError</code> (Ошибка деления на ноль): Возникает, когда в программе происходит попытка деления на ноль.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ValueError</code> (Ошибка значения): Происходит, когда функция принимает аргумент правильного типа, но неправильного значения.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>IndexError</code> (Ошибка индекса): Возникает, когда индекс выходит за границы допустимого диапазона или список пуст.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>FileNotFoundError</code> (Ошибка файла не найден): Происходит, когда программа пытается открыть файл, который не существует.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>AttributeError</code> (Ошибка атрибута): Возникает, когда объект не имеет определенного атрибута или метода.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Это лишь некоторые из типов ошибок, которые могут возникать в Python. Обработка и управление ошибками являются важными аспектами разработки программного обеспечения, чтобы обеспечить корректное выполнение программы и предоставить информацию об ошибках для отладки и исправления.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Проверка на ошибки инпута:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def greeting(greet):
    return lambda name: f"{greet} {name}"
def get_valid_input():
    while True:
        try:
            info_text = input("Введите ваше имя: ")
            # Проверяем, что введенная строка состоит из букв и не пуста
            if info_text.isalpha():
                return info_text
            else:
                print("Пожалуйста, введите корректное имя (буквы без пробелов).")
        except ValueError:
            print("Пожалуйста, введите корректное значение.")

info_text = get_valid_input()

morning_greeting = greeting('Привет мир')
evening_greeting = greeting('Как дела?')

print(f"{morning_greeting(info_text)} {evening_greeting(info_text)}")
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Получение информации об ошибке</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Как получать текст из возникшей ошибке</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Для получения текста из возникшей ошибки в Python, можно использовать блок <code>try-except</code> и метод <code>str()</code> для преобразования объекта ошибки в строку.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>try:
    # Код, в котором возможно возникновение ошибки
    x = 10 / 0
except ZeroDivisionError as error:
    # Блок кода для обработки ошибки ZeroDivisionError
    error_message = str(error)
    print("Ошибка деления на ноль:", error_message)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере блок кода внутри <code>try</code> делит число 10 на ноль, что приводит к возникновению ошибки <code>ZeroDivisionError</code>. В блоке <code>except ZeroDivisionError</code> мы можем получить текст ошибки, преобразовав объект ошибки в строку с помощью <code>str(error)</code>. Затем мы выводим сообщение об ошибке с полученным текстом.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Таким образом, используя блок <code>try-except</code> и метод <code>str()</code>, можно получить информацию об ошибке и вывести ее для дальнейшего анализа или обработки.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Создание ошибок с помощью raise</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ошибки могут быть созданы с помощью ключевого слова <code>raise</code> в Python. Когда мы вызываем <code>raise</code> с указанием типа ошибки, мы фактически создаем новый экземпляр этой ошибки и выбрасываем его.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример создания ошибки с помощью <code>raise</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def divide_numbers(a, b):
    if b == 0:
        raise ZeroDivisionError("Деление на ноль недопустимо.")
    return a / b

try:
    result = divide_numbers(10, 0)
    print(result)
except ZeroDivisionError as error:
    print("Произошла ошибка:", error)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере функция <code>divide_numbers</code> делит число <code>a</code> на число <code>b</code>. Если <code>b</code> равно нулю, мы вызываем <code>raise ZeroDivisionError("Деление на ноль недопустимо.")</code>, чтобы создать новый экземпляр ошибки <code>ZeroDivisionError</code> и выбросить его. В блоке <code>except ZeroDivisionError</code> мы перехватываем эту ошибку и выводим соответствующее сообщение.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Таким образом, использование ключевого слова <code>raise</code> позволяет нам создавать и выбрасывать собственные ошибки в Python. Это полезно, когда мы хотим явно указать, что произошла ошибка, и предоставить соответствующую информацию об этой ошибке.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Условные инструкции</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Условные инструкции</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Условные инструкции в Python позволяют программе принимать решения и выполнять различные действия в зависимости от условий.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Инструкция if</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Инструкция <code>if</code> используется для выполнения блока кода, если определенное условие истинно.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = 10

if x &gt; 5:
    print("x больше 5")

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, если значение переменной <code>x</code> больше 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x больше 5".</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Инструкция if-else</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Инструкция <code>if-else</code> используется для выполнения одного блока кода, если условие истинно, и другого блока кода, если условие ложно.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = 10

if x &gt; 5:
    print("x больше 5")
else:
    print("x меньше или равно 5")

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, если значение переменной <code>x</code> больше 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x больше 5". В противном случае, если значение <code>x</code> меньше или равно 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x меньше или равно 5".</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Инструкция if-elif-else</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Инструкция <code>if-elif-else</code> используется для выполнения различных блоков кода в зависимости от нескольких условий.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>x = 10

if x &gt; 5:
    print("x больше 5")
elif x &lt; 5:
    print("x меньше 5")
else:
    print("x равно 5")

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, если значение переменной <code>x</code> больше 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x больше 5". Если значение <code>x</code> меньше 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x меньше 5". Если значение <code>x</code> равно 5, будет выполнена инструкция <code>print()</code>, которая выведет сообщение "x равно 5".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Условные инструкции позволяют программе принимать решения на основе условий и выполнять соответствующие действия. Они являются важным инструментом при разработке программного обеспечения.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1501</wp:post_id>
		<wp:post_date><![CDATA[2024-01-29 23:16:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-29 20:16:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-29 23:16:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-29 20:16:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-devyat-26-01-2024]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Джанго освобожденный]]></title>
		<link>https://achkasovwebmagic.ru/dzhango-osvobozhdennyj/</link>
		<pubDate>Mon, 29 Jan 2024 20:36:37 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1503</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":1504,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/01/18984720-1024x576.jpg" alt="" class="wp-image-1504"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>"Джанго освобожденный" — это фильм, который оставляет неизгладимое впечатление, не только благодаря увлекательному сюжету, но и глубокому вниманию к социальным вопросам.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>История Джанго, играемого Джейми Фоксом, начинается с невообразимых страданий рабства, но со временем переходит в захватывающее приключение, когда он становится охотником за головами под руководством Доктора Шульца, превосходно исполненного Кристофом Вальцем. Они образуют уникальный дуэт, борясь за справедливость в атмосфере дикого Запада.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Что делает фильм особенным, так это его способность критически осмыслить исторические боли — рабство и расовую дискриминацию. Фильм ярко и неприкрыто демонстрирует безграничную жестокость системы, в которой действуют герои. В каждой сцене чувствуется тяжесть истины, что создает сильную эмоциональную связь с персонажами.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Сценарий Тарантино не просто рассказывает историю, но и поднимает важные вопросы. Фильм становится метафорой для борьбы за свободу и права в современном обществе. Это не только картина о прошлом, но и зеркало для наших современных вызовов и борьбы за человеческое достоинство.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Визуальное исполнение фильма тоже заслуживает отдельного внимания. От реквизита до костюмов, каждая деталь тщательно проработана, что добавляет аутентичности и погружает зрителя в мир того времени. Монтаж и камера, в свою очередь, создают кинематографическое путешествие, полное ярких образов и эпичных кадров.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Музыкальное сопровождение великолепно вписывается в общую атмосферу, подчеркивая эмоции и поддерживая настроение фильма. Это еще один слой, который добавляет к общему впечатлению.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"Джанго освобожденный" — это фильм, который заставляет задуматься и чувствовать. Он приковывает внимание своей силой повествования, великолепной актерской игрой и глубоким обращением к социальным темам. Не просто кино — это искусство, которое оставляет свой след в сердце зрителя.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1503</wp:post_id>
		<wp:post_date><![CDATA[2024-01-29 23:36:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-29 20:36:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-29 23:38:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-29 20:38:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dzhango-osvobozhdennyj]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="akterskoeiskusstvo"><![CDATA[АктерскоеИскусство]]></category>
		<category domain="post_tag" nicename="vestern"><![CDATA[Вестерн]]></category>
		<category domain="post_tag" nicename="dzhangoosvobozhdennyj"><![CDATA[ДжангоОсвобожденный]]></category>
		<category domain="category" nicename="zhizn-kak-ona-est"><![CDATA[Жизнь как она есть]]></category>
		<category domain="post_tag" nicename="istoricheskayadrama"><![CDATA[ИсторическаяДрама]]></category>
		<category domain="post_tag" nicename="kinoiskusstvo"><![CDATA[Киноискусство]]></category>
		<category domain="post_tag" nicename="kinootarantino"><![CDATA[КиноОТарантино]]></category>
		<category domain="post_tag" nicename="ravenstvo"><![CDATA[Равенство]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="svoboda"><![CDATA[Свобода]]></category>
		<category domain="post_tag" nicename="socialnyetemy"><![CDATA[СоциальныеТемы]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_og_content_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"check";s:32:"68f1ff1d77c93dd965e0a8d7202dd120";s:6:"images";a:1:{i:0;i:1504;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День десятый 29,01,2024]]></title>
		<link>https://achkasovwebmagic.ru/den-desyatyj-29-01-2024/</link>
		<pubDate>Tue, 30 Jan 2024 19:57:23 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1506</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code"><code># Пример использования условной конструкции if-else в Python
x = 10

if x &gt; 5:
    print("x больше 5")
else:
    print("x меньше или равно 5")
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Условная конструкция if-else в Python позволяет выполнять определенный блок кода, если условие истинно, и другой блок кода, если условие ложно. В приведенном примере, если значение переменной <code>x</code> больше 5, то будет выведено сообщение "x больше 5", иначе будет выведено сообщение "x меньше или равно 5".</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Пример использования условной конструкции if-elif-else в Python
x = 10

if x &gt; 5:
    print("x больше 5")
elif x == 5:
    print("x равно 5")
else:
    print("x меньше 5")
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Условная конструкция if-elif-else в Python позволяет проверять несколько условий последовательно и выполнять соответствующий блок кода для первого истинного условия. В приведенном примере, если значение переменной <code>x</code> больше 5, то будет выведено сообщение "x больше 5". Если значение переменной <code>x</code> равно 5, то будет выведено сообщение "x равно 5". Если оба условия ложные, то будет выведено сообщение "x меньше 5".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>вот несколько примеров использования условной конструкции <code>if</code> на различных языках программирования:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Пример 1: Проверка четности числа
number = 10
if number % 2 == 0:
    print("Число четное")
else:
    print("Число нечетное")

# Пример 2: Сравнение двух чисел
x = 5
y = 10
if x &gt; y:
    print("x больше y")
elif x &lt; y:
    print("x меньше y")
else:
    print("x равно y")
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Вместо elif и else можно использовать функцию return</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Задание: есть словарь, в нем значение имени есть, нужно сделать проверку, если есть значение скорости и времени, тогда их умножаем между собой и выводим результат, если нет, выводим информацию что нет параметров</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>dict_info = {
    'name': 'john',
    'speed': 255,
    'time': 21
}

def route_info(a, b, c):
    if 'speed' in a and 'time' in a:
        result = b * c
        return f"Если в словаре есть ключи speed и time, то результат умножения: {result}"
    else:
        return "В словаре отсутствуют ключи speed и/или time"

print(route_info(dict_info, dict_info.get('speed'), dict_info.get('time')))
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Тернарный оператор (условное выражение)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Тернарный оператор, также известный как условное выражение, представляет собой краткую форму записи условия во многих языках программирования. Он позволяет вам написать короткое условие в одной строке кода. Тернарный оператор имеет следующий синтаксис</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>result_if_true if condition else result_if_false
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Это выражение возвращает <code>result_if_true</code>, если условие <code>condition</code> истинно, и <code>result_if_false</code> в противном случае.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример использования тернарного оператора в Python:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Обычный способ с использованием условного оператора if-else
x = 10
if x &gt; 5:
    result = "Больше 5"
else:
    result = "Меньше или равно 5"

# Тернарный оператор
result = "Больше 5" if x &gt; 5 else "Меньше или равно 5"
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В данном примере, если <code>x</code> больше 5, переменной <code>result</code> присваивается строка "Больше 5", иначе - "Меньше или равно 5".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Тернарный оператор может делать код более лаконичным и удобным, особенно в случаях, когда условие не очень сложное.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Простая задачка и ее решение:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Давайте представим, у нас есть переменная <code>age</code>, и мы хотим определить, является ли человек совершеннолетним или нет. Мы можем использовать тернарный оператор для этой задачи. Вот простая задача:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Задача: Определить, является ли человек совершеннолетним
age = 20

# Используем тернарный оператор
status = "Совершеннолетний" if age &gt;= 18 else "Несовершеннолетний"

# Выводим результат
print(f"Человек: {status}")
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере, если возраст (<code>age</code>) равен или больше 18, то переменной <code>status</code> присваивается строка "Совершеннолетний", иначе - "Несовершеннолетний". В конце мы выводим результат.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><!-- wp:paragraph -->
<p>Важно: В тернарном операторе должно быть одно условие и два выражения (одно для истинного условия и одно для ложного)</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Решение задачки: <strong>Напишите программу, которая запрашивает у пользователя текущее время в часах (от 0 до 23) и выводит сообщение "Доброе утро", "Добрый день", "Добрый вечер" или "Доброй ночи" в зависимости от введенного времени. Используйте тернарный оператор для решения этой задачи.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>clock = 18

status = "Утро" if clock &lt; 4 else ("День" if clock &lt; 14 else ("Вечер" if clock &lt; 21 else "Ночь"))

print(f"Время дня: {status}")
#Время дня: Вечер
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1506</wp:post_id>
		<wp:post_date><![CDATA[2024-01-30 22:57:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-30 19:57:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-30 22:57:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-30 19:57:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-desyatyj-29-01-2024]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="svoboda"><![CDATA[Свобода]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Поиск простых чисел:]]></title>
		<link>https://achkasovwebmagic.ru/poisk-prostyh-chisel/</link>
		<pubDate>Tue, 30 Jan 2024 20:22:34 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1508</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>Задача:</em> Напишите программу, которая принимает число от пользователя и определяет, является ли оно простым. Затем спрашивайте пользователя, хочет ли он проверить еще одно число (да/нет).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print("Давайте определим какой год, высокосный или нет")
def test():
	try:
		number = int(input("Введите число: "))
		if number >= 0 and number &lt;= 9:
			print("Число простое")
		else:
			print("Число составное")
		while True:
			answer = input("Хотите продолжить? (да/нет): ").lower()
			if answer == 'да':
				test()  # Повторяем
			elif answer == 'нет':
				print("Программа завершена.")
				break  # Выходим из цикла
			else:
				print("Некорректный ввод. Введите 'да' или 'нет'.")
	except ValueError:
		print("Ошибка: Введенный год вами, не корректный")


# Запускаем программу
test()

#Ответ в консоли: 
#Давайте определим какой год, высокосный или нет
#Введите число: 12
#Число составное
#Хотите продолжить? (да/нет): да
#Введите число: 5
#Число простое
#Хотите продолжить? (да/нет):
#Программа завершена.</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1508</wp:post_id>
		<wp:post_date><![CDATA[2024-01-30 23:22:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-30 20:22:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-30 23:22:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-30 20:22:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poisk-prostyh-chisel]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="bez-rubriki"><![CDATA[Без рубрики]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="post_tag" nicename="reshenie-prostyh-zadachek"><![CDATA[решение простых задачек]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Секреты Успешного Веб-Сайта на WordPress: Выбор Тем и Плагинов]]></title>
		<link>https://achkasovwebmagic.ru/sekrety-uspeshnogo-veb-sajta-na-wordpress-vybor-tem-i-plaginov/</link>
		<pubDate>Wed, 31 Jan 2024 16:30:02 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1511</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>WordPress остается одной из самых популярных платформ для создания веб-сайтов благодаря своей гибкости и обширному выбору тем и плагинов. Однако, правильный выбор темы и плагинов является ключевым этапом в создании успешного онлайн-присутствия. Давайте рассмотрим несколько советов, которые помогут вам принимать информированные решения при выборе темы и плагинов для вашего веб-сайта на WordPress.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Выбор Темы:</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">1. Адаптивность и Отзывчивость</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Выбирайте темы, которые адаптированы под различные устройства и экраны. <a href="https://www.elegantthemes.com/gallery/divi/">Divi</a> - многоцелевая тема с визуальным конструктором, обеспечивающая гибкость и прекрасные возможности кастомизации.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">2. Совместимость с Плагинами</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Убедитесь, что тема совместима с популярными плагинами, такими как WooCommerce, Yoast SEO и другими, которые могут быть необходимы для вашего сайта.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">3. Настройка и Гибкость</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Выбирайте темы с обширными возможностями настройки, чтобы легко адаптировать дизайн под ваши потребности без необходимости внесения изменений в код. <a href="https://wpastra.com/">Astra</a> - легкая и быстрая тема, идеально подходящая для профессиональных сайтов, обеспечивающая высокую производительность.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">4. Поддержка</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Удостоверьтесь, что разработчик предоставляет поддержку темы. <a href="https://oceanwp.org/">OceanWP</a> - универсальная тема с обширными опциями настройки, поддерживающая интеграцию с WooCommerce.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">5. Оценки и Отзывы</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Изучите отзывы и рейтинги от других пользователей, чтобы оценить надежность и популярность темы. <a href="https://generatepress.com/">GeneratePress</a> - легкая и быстрая тема с простотой использования, с встроенной поддержкой различных плагинов.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">6. Hestia</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Современная тема с красивым дизайном, идеально подходящая для бизнес-сайтов, с легкой интеграцией с различными плагинами.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Выбор Плагинов:</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">1. Необходимость функции</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Установка только тех плагинов, которые действительно необходимы для вашего сайта, чтобы избежать его перегруженности.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">2. Совместимость с Темой</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Удостоверьтесь, что плагин совместим с вашей темой, чтобы избежать конфликтов и проблем с отображением. <a href="https://yoast.com/wordpress/plugins/seo/">Yoast SEO</a> - мощный инструмент для оптимизации поисковых запросов и улучшения SEO-показателей.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">3. Обновления и Поддержка</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Выбирайте плагины, регулярно обновляемые и поддерживаемые разработчиками для обеспечения безопасности и совместимости. <a href="https://woocommerce.com/">WooCommerce</a> - лидер среди плагинов для создания интернет-магазинов на WordPress с обширными возможностями управления продажами и инвентарем.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">4. Рейтинг и Отзывы</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Изучите рейтинги и отзывы пользователей для получения представления о надежности и эффективности плагина. <a href="https://wordpress.org/plugins/contact-form-7/">Contact Form 7</a> - простой и гибкий плагин для создания форм обратной связи.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">5. Совместимость с Другими Плагинами</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Учитывайте взаимодействие плагина с другими установленными на вашем сайте, чтобы избежать возможных конфликтов. <a href="https://jetpack.com/">Jetpack</a> - многофункциональный плагин, предоставляющий инструменты для улучшения безопасности, аналитики и социальных сетей.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">6. Elementor</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Визуальный конструктор страниц, который упрощает создание красочных и функциональных страниц без необходимости в знании кода.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Выбирая из этих популярных тем и плагинов, вы сможете построить мощный и эффективный веб-сайт, сочетая стиль, функциональность и безопасность.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1511</wp:post_id>
		<wp:post_date><![CDATA[2024-01-31 19:30:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-31 16:30:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-31 19:30:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-31 16:30:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sekrety-uspeshnogo-veb-sajta-na-wordpress-vybor-tem-i-plaginov]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="wordpress-cms"><![CDATA[WordPress CMS]]></category>
		<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="ucheba"><![CDATA[учеба]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[День одиннадцатый 30,01,2024]]></title>
		<link>https://achkasovwebmagic.ru/den-odinnadcatyj-30-01-2024/</link>
		<pubDate>Thu, 01 Feb 2024 18:44:11 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1513</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2 class="wp-block-heading">Циклы</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>В Python существует несколько типов циклов, которые позволяют выполнять повторяющиеся операции. Основные типы циклов в Python:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Цикл <code>for</code></strong>: Цикл <code>for</code> используется для итерации по последовательности (списку, кортежу, строке и т.д.) или другому итерируемому объекту. Пример: <code>for i in range(5): print(i)</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Цикл <code>while</code></strong>: Цикл <code>while</code> выполняется, пока условие истинно. Пример: <code>count = 0 while count &lt; 5: print(count) count += 1</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Цикл <code>foreach</code> (или цикл <code>for-in</code>)</strong>: В Python также существует цикл <code>for</code> с расширенной функциональностью, который позволяет перебирать элементы из итерируемого объекта без явной индексации. Пример: <code>fruits = ["яблоко", "груша", "банан"] for fruit in fruits: print(fruit)</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Контроль циклов: <code>break</code> и <code>continue</code></strong>:<ul><li>Оператор <code>break</code> прерывает выполнение цикла, если определенное условие выполняется.</li><li>Оператор <code>continue</code> пропускает текущую итерацию цикла и переходит к следующей.</li></ul>Пример: <code>for i in range(10): if i == 3: break if i == 5: continue print(i)</code></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Это основные типы циклов в Python. Вы можете использовать их в сочетании с условиями и другими управляющими конструкциями для создания сложных программ.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Варианты решения задач с циклами</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Цикл <code>for</code></strong>: <em>Задача:</em> Напишите программу, которая суммирует все четные числа от 1 до 10 и выводит результат. <em>Решение:</em> <code>total_sum = 0 for i in range(1, 11): if i % 2 == 0: total_sum += i print("Сумма четных чисел от 1 до 10:", total_sum)</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Цикл <code>while</code></strong>: <em>Задача:</em> Напишите программу, которая выводит числа от 3 до 8 с шагом 2, используя цикл <code>while</code>. <em>Решение:</em> <code>num = 3 while num &lt;= 8: print(num) num += 2</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Цикл <code>foreach</code></strong>: <em>Задача:</em> Напишите программу, которая выводит длину каждого слова в списке. <em>Решение:</em> <code>words = ["яблоко", "груша", "банан"] for word in words: print(f"Длина слова '{word}': {len(word)}")</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Контроль циклов: <code>break</code> и <code>continue</code></strong>: <em>Задача:</em> Напишите программу, которая выводит числа от 1 до 5, пропуская число 3 и прерывая цикл после 4. <em>Решение:</em> <code>for i in range(1, 6): if i == 3: continue if i == 5: break print(i)</code></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Это простые задачи, которые позволяют вам практиковаться в использовании различных типов циклов и контроля циклов в Python.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Цикл for in</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Цикл <code>for</code> в Python с использованием <code>for-in</code> является удобным способом перебора элементов в итерируемом объекте, таком как список, кортеж, строка или другой итерируемый контейнер. Синтаксис цикла <code>for-in</code> выглядит следующим образом:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>for переменная in итерируемый_объект:
    # код, выполняемый в каждой итерации

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Где:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>переменная</code> - это переменная, которая принимает значение каждого элемента из итерируемого объекта на каждой итерации.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>итерируемый_объект</code> - это объект, содержащий набор значений, по которым происходит итерация.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Пример использования цикла <code>for-in</code> с листом (списком):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>fruits = &#91;"яблоко", "груша", "банан"]
for fruit in fruits:
    print(fruit)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере <code>fruit</code> - это переменная, которая принимает значение каждого элемента из списка <code>fruits</code> на каждой итерации цикла. Внутри цикла мы выводим значение переменной <code>fruit</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Результат выполнения данного кода будет:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>яблоко
груша
банан

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Также, цикл <code>for-in</code> можно использовать с функцией <code>range()</code> для создания числовых последовательностей. Пример:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>for i in range(5):
    print(i)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код выведет числа от 0 до 4, так как <code>range(5)</code> создает последовательность от 0 до 4 (всего 5 чисел).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Цикл <code>for-in</code> удобен и легко читаем, и он позволяет эффективно обрабатывать элементы в итерируемых объектах без явной индексации.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Примеры кода с использованием списка</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Создаем список с именами
names = &#91;"Анна", "Петр", "Мария", "Иван"]

# Используем цикл for-in для вывода каждого имени
print("Список имен:")
for name in names:
    print(name)

# Используем цикл for-in для вывода длины каждого имени
print("\\\\nДлины имен:")
for name in names:
    print(f"{name}: {len(name)} букв")

# Используем цикл for-in для создания нового списка с приветствиями
greetings = &#91;]
for name in names:
    greeting = f"Привет, {name}!"
    greetings.append(greeting)

# Выводим новый список с приветствиями
print("\\\\nПриветствия:")
for greeting in greetings:
    print(greeting)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере мы создали список <code>names</code>, содержащий имена. Затем мы использовали цикл <code>for-in</code> для:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>Вывода каждого имени в отдельной строке.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Вывода длины каждого имени.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Создания нового списка <code>greetings</code> с приветствиями для каждого имени.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Результат выполнения программы будет примерно следующим:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Список имен:
Анна
Петр
Мария
Иван

Длины имен:
Анна: 4 букв
Петр: 4 букв
Мария: 5 букв
Иван: 4 букв

Приветствия:
Привет, Анна!
Привет, Петр!
Привет, Мария!
Привет, Иван!

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Таким образом, цикл <code>for-in</code> позволяет удобно работать с элементами списка и выполнять различные операции для каждого элемента.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Решение задачи:</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def dict_to_list(input_dict):
    result_list = &#91;]
    for key, value in input_dict.items():
        if isinstance(value, int):
            result_list.append((key, value * 2))
        else:
            result_list.append((key, value))
    return result_list

# Пример использования:
my_dict = {'a': 3, 'b': 5, 'c': 7, 'd': 'hello'}
result = dict_to_list(my_dict)
print(result)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Этот код создает список кортежей из словаря <code>my_dict</code>. Если значение ключа является целым числом, то оно умножается на 2 перед добавлением в кортеж. Результат выводится на экран.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Пример вывода:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#91;('a', 6), ('b', 10), ('c', 14), ('d', 'hello')]

</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Создание пустого списка (<code>result_list</code>):</strong> <code>result_list = []</code> Здесь создается пустой список, который будет заполнен кортежами.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Итерация по элементам словаря:</strong> <code>for key, value in input_dict.items():</code> С помощью цикла <code>for</code> проходим по каждой паре ключ-значение в переданном словаре <code>input_dict</code>. <code>key</code> - это ключ, а <code>value</code> - соответствующее ему значение.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Добавление кортежей в список:</strong> <code>if isinstance(value, int): result_list.append((key, value * 2)) else: result_list.append((key, value))</code> Проверяем тип значения (<code>int</code> или нет). Если значение является целым числом (<code>int</code>), то умножаем его на 2, иначе добавляем его как есть в кортеж. Затем этот кортеж добавляется в список <code>result_list</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Возвращение результата:</strong> <code>return result_list</code> По завершении итерации возвращается сформированный список кортежей.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Пример использования:</strong> <code>my_dict = {'a': 3, 'b': 5, 'c': 7, 'd': 'hello'} result = dict_to_list(my_dict) print(result)</code> Создается словарь <code>my_dict</code>, затем вызывается функция <code>dict_to_list</code> с этим словарем, и результат выводится на экран.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Таким образом, функция <code>dict_to_list</code> принимает словарь, преобразует его в список кортежей и возвращает этот список. Если значение в словаре является целым числом, то оно умножается на 2 перед добавлением в кортеж.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Встроенная функция Filter</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Функция <code>filter()</code> в Python предназначена для фильтрации элементов итерируемого объекта (например, списка) на основе заданного условия. Она возвращает новый итератор, содержащий только те элементы, для которых условие возвращает <code>True</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Синтаксис функции <code>filter()</code> выглядит следующим образом:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>filter(условие, итерируемый_объект)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>где:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>условие</code> - функция, возвращающая <code>True</code> или <code>False</code> для каждого элемента итерируемого объекта.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>итерируемый_объект</code> - итерируемый объект, элементы которого будут проверяться по заданному условию.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Пример использования <code>filter()</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># Функция для проверки, является ли число четным
def is_even(x):
    return x % 2 == 0

# Исходный список чисел
numbers = &#91;1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Используем filter() для отбора четных чисел
filtered_numbers = filter(is_even, numbers)

# Преобразуем результат filter() в список и выводим его
result = list(filtered_numbers)
print(result)

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>В этом примере <code>is_even()</code> - это функция, которая возвращает <code>True</code>, если число четное, и <code>False</code>, если нечетное. Функция <code>filter()</code> используется для фильтрации списка чисел, оставляя только четные. В результате получается новый список <code>[2, 4, 6, 8, 10]</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Важно отметить, что <code>filter()</code> возвращает итератор, поэтому часто его преобразуют в список (как в примере) или используют в цикле для обработки отфильтрованных элементов.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1513</wp:post_id>
		<wp:post_date><![CDATA[2024-02-01 21:44:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-01 18:44:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-01 21:44:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-01 18:44:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[den-odinnadcatyj-30-01-2024]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="vebrazvitie"><![CDATA[ВебРазвитие]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="category" nicename="ucheba-na-python-razrabotchika"><![CDATA[Учеба на Python разработчика]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Лучшие Плагины для WordPress: Улучшите Ваш Сайт с Помощью Этих Инструментов]]></title>
		<link>https://achkasovwebmagic.ru/luchshie-plaginy-dlya-wordpress-uluchshite-vash-sajt-s-pomoshhju-etih-instrumentov/</link>
		<pubDate>Fri, 02 Feb 2024 18:57:55 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1515</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>WordPress является одной из самых популярных платформ для создания веб-сайтов благодаря своей гибкости и множеству возможностей для настройки. Одним из ключевых факторов, делающих WordPress таким популярным, является его способность поддерживать различные плагины, которые расширяют функциональность сайта. В этой статье мы рассмотрим несколько самых популярных плагинов для WordPress, которые помогут вам улучшить ваш веб-проект.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li><strong>Yoast SEO: Оптимизация для Поисковых Систем</strong><br>Плагин Yoast SEO является незаменимым инструментом для оптимизации контента вашего сайта для поисковых систем. Он предоставляет рекомендации по улучшению метаданных, ключевых слов и других аспектов, помогая вашему сайту лучше ранжироваться в поисковых запросах.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>WooCommerce: Интернет-магазин на Вашем Сайте</strong><br>Если вам нужен интернет-магазин, то WooCommerce - это идеальный плагин. Он предоставляет все необходимые инструменты для создания и управления электронным магазином, включая возможности управления инвентарем, настройки доставки и оплаты.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Contact Form 7: Создание Форм Обратной Связи</strong><br>Плагин Contact Form 7 делает процесс создания форм обратной связи простым и эффективным. С его помощью вы можете легко создавать и управлять различными формами на вашем сайте, такими как формы заказа, обратной связи или опросы.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Akismet Anti-Spam: Защита от Спама</strong><br>Никто не любит спам на своем сайте. Плагин Akismet помогает бороться с нежелательными комментариями и сообщениями, автоматически фильтруя потенциальный спам и обеспечивая безопасность вашего сайта.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Jetpack: Все в Одном Плагине</strong><br>Jetpack - это многофункциональный плагин, предоставляющий целый ряд инструментов, включая аналитику, защиту от вредоносных программ, автоматическое резервное копирование и многое другое. Это отличное решение для тех, кто хочет иметь все необходимые функции в одном плагине.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Wordfence Security: Защита Безопасности Сайта</strong><br>Wordfence Security - это мощный плагин для обеспечения безопасности вашего сайта. Он предоставляет функции мониторинга, обнаружения вторжений, защиты от вредоносного программного обеспечения и многие другие инструменты для обеспечения надежной защиты вашего веб-проекта.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Elementor: Визуальный Редактор Страниц</strong><br>Elementor предоставляет визуальный редактор, позволяя вам создавать страницы и посты на вашем сайте без необходимости в знании кода. С его помощью вы можете легко редактировать дизайн и структуру страниц в реальном времени.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Выбор плагинов для WordPress зависит от конкретных потребностей вашего сайта. Однако, интеграция вышеупомянутых плагинов может значительно улучшить функциональность, безопасность и эффективность вашего веб-проекта. Не забывайте регулярно обновлять плагины и делать резервные копии, чтобы обеспечить стабильную и безопасную работу вашего сайта.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1515</wp:post_id>
		<wp:post_date><![CDATA[2024-02-02 21:57:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-02 18:57:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-02 21:57:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-02 18:57:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[luchshie-plaginy-dlya-wordpress-uluchshite-vash-sajt-s-pomoshhju-etih-instrumentov]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="wordpress-cms"><![CDATA[WordPress CMS]]></category>
		<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="razrabotka"><![CDATA[разработка]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Как спасти свой сайт от нового вируса в Popup Builder WordPress – Шаги к немедленному лечению!]]></title>
		<link>https://achkasovwebmagic.ru/kak-spasti-svoj-sajt-ot-novogo-virusa-v-popup-builder-wordpress-shagi-k-nemedlennomu-lecheniju/</link>
		<pubDate>Mon, 05 Feb 2024 13:41:50 +0000</pubDate>
		<dc:creator><![CDATA[AlexWeb]]></dc:creator>
		<guid isPermaLink="false">https://achkasovwebmagic.ru/?p=1517</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>За последние несколько недель, я столкнулся с серьезной угрозой безопасности на своем сайте - атакой Balada Injector. В данной статье я расскажу о методах атаки и том, как я справился с этой проблемой, предоставив свои собственные рекомендации для защиты веб-ресурса.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Balada Injector воспользовался уязвимостью в Popup Builder, используя событие "sgpbWillOpen" для внедрения вредоносного <a></a>JavaScript-кода при открытии всплывающего окна. Злоумышленники также модифицировали файл wp-blog-header.php для внедрения бэкдора JavaScript. Дополнительно, атакующие использовали файлы cookie, связанные с администратором, для загрузки сценариев внедрения основного бэкдора, скрывающегося под плагином "wp-felody.php".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Решение проблемы:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1. Обновление плагина:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Самый важный шаг в обеспечении безопасности сайта - обновление Popup Builder до последней версии. Это устранит известные уязвимости и предотвратит атаку через событие "sgpbWillOpen".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Проверка попап окон в JS:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Внимательно изучите все всплывающие окна в вашем веб-ресурсе, особенно те, которые используют JavaScript. Проверьте на наличие подозрительного кода и удалите все, что не является необходимым.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. Удаление лишнего JS внутри попап окна:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Проведите аудит JavaScript-кода внутри ваших всплывающих окон. Удалите любой лишний код, который не относится к функциональности всплывающего окна, чтобы уменьшить риски вредоносных внедрений.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Скрин примера кода который может появиться.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1518,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://achkasovwebmagic.ru/wp-content/uploads/2024/02/js-script-1024x426.jpg" alt="" class="wp-image-1518"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Рекомендации по защите:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>・Регулярные обновления:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Обновляйте все компоненты сайта, включая темы, плагины и ядро WordPress, чтобы минимизировать риски уязвимостей.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>・Мониторинг безопасности:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Используйте средства мониторинга безопасности для оперативного выявления подозрительной активности.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>・Бэкапы данных:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Регулярно создавайте резервные копии данных для быстрого восстановления в случае атаки.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>・Сканирование на вредоносное ПО:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Проводите регулярные сканирования сайта на наличие вредоносного программного обеспечения.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>・ Сильные пароли и аутентификация:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Используйте сложные пароли и включайте двухфакторную аутентификацию для всех административных учетных записей.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Проактивная безопасность и систематические проверки помогут избежать подобных атак. Мои опыт и рекомендации направлены на создание более надежной защиты веб-ресурса от вредоносных вмешательств.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1517</wp:post_id>
		<wp:post_date><![CDATA[2024-02-05 16:41:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-05 13:41:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-05 16:41:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-05 13:41:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kak-spasti-svoj-sajt-ot-novogo-virusa-v-popup-builder-wordpress-shagi-k-nemedlennomu-lecheniju]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress-razrabotka"><![CDATA[WordPress разработка]]></category>
		<category domain="post_tag" nicename="wordpressmagic"><![CDATA[WordPressMagic]]></category>
		<category domain="post_tag" nicename="virusy"><![CDATA[вирусы]]></category>
		<category domain="post_tag" nicename="lechenie"><![CDATA[лечение]]></category>
		<category domain="post_tag" nicename="razrabotka-veb-sajta-na-wordpress"><![CDATA[Разработка веб-сайта на WordPress]]></category>
		<category domain="language" nicename="ru"><![CDATA[Русский]]></category>
		<category domain="post_tag" nicename="chasti-koda"><![CDATA[части кода]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_seo_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_internal_links_processed]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[rank_math_og_content_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"check";s:32:"2d3bd7a7a34b5d87f297ff6dcb3c86b4";s:6:"images";a:1:{i:0;i:1518;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	